!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){var n=[],i=e.document,r=n.slice,o=n.concat,s=n.push,a=n.indexOf,l={},u=l.toString,c=l.hasOwnProperty,f={},h="2.2.4",d=function(e,t){return new d.fn.init(e,t)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,g=/^-ms-/,m=/-([\da-z])/gi,v=function(e,t){return t.toUpperCase()};function y(e){var t=!!e&&"length"in e&&e.length,n=d.type(e);return"function"!==n&&!d.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}d.fn=d.prototype={jquery:h,constructor:d,selector:"",length:0,toArray:function(){return r.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:r.call(this)},pushStack:function(e){var t=d.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return d.each(this,e)},map:function(e){return this.pushStack(d.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(r.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},d.extend=d.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||d.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(i=e[t])&&(u&&i&&(d.isPlainObject(i)||(r=d.isArray(i)))?(r?(r=!1,o=n&&d.isArray(n)?n:[]):o=n&&d.isPlainObject(n)?n:{},s[t]=d.extend(u,o,i)):void 0!==i&&(s[t]=i));return s},d.extend({expando:"jQuery"+(h+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===d.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=e&&e.toString();return!d.isArray(e)&&t-parseFloat(t)+1>=0},isPlainObject:function(e){var t;if("object"!==d.type(e)||e.nodeType||d.isWindow(e))return!1;if(e.constructor&&!c.call(e,"constructor")&&!c.call(e.constructor.prototype||{},"isPrototypeOf"))return!1;for(t in e);return void 0===t||c.call(e,t)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[u.call(e)]||"object":typeof e},globalEval:function(e){var t,n=eval;(e=d.trim(e))&&(1===e.indexOf("use strict")?((t=i.createElement("script")).text=e,i.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(g,"ms-").replace(m,v)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,i=0;if(y(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(p,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(y(Object(e))?d.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:a.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,s=0,a=[];if(y(e))for(i=e.length;s<i;s++)null!=(r=t(e[s],s,n))&&a.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&a.push(r);return o.apply([],a)},guid:1,proxy:function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),d.isFunction(e))return i=r.call(arguments,2),(o=function(){return e.apply(t||this,i.concat(r.call(arguments)))}).guid=e.guid=e.guid||d.guid++,o},now:Date.now,support:f}),"function"==typeof Symbol&&(d.fn[Symbol.iterator]=n[Symbol.iterator]),d.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});var _=function(e){var t,n,i,r,o,s,a,l,u,c,f,h,d,p,g,m,v,y,_,b="sizzle"+1*new Date,T=e.document,E=0,C=0,w=oe(),x=oe(),S=oe(),A=function(e,t){return e===t&&(f=!0),0},D=1<<31,N={}.hasOwnProperty,I=[],k=I.pop,O=I.push,j=I.push,L=I.slice,P=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",q="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",M="\\["+R+"*("+q+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+R+"*\\]",W=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",F=new RegExp(R+"+","g"),B=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),U=new RegExp("^"+R+"*,"+R+"*"),V=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),K=new RegExp("="+R+"*([^\\]'\"]*?)"+R+"*\\]","g"),$=new RegExp(W),Q=new RegExp("^"+q+"$"),Y={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,z=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/[+~]/,ee=/'|\\/g,te=new RegExp("\\\\([\\da-f]{1,6}"+R+"?|("+R+")|.)","ig"),ne=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},ie=function(){h()};try{j.apply(I=L.call(T.childNodes),T.childNodes),I[T.childNodes.length].nodeType}catch(e){j={apply:I.length?function(e,t){O.apply(e,L.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function re(e,t,i,r){var o,a,u,c,f,p,v,y,E=t&&t.ownerDocument,C=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==C&&9!==C&&11!==C)return i;if(!r&&((t?t.ownerDocument||t:T)!==d&&h(t),t=t||d,g)){if(11!==C&&(p=J.exec(e)))if(o=p[1]){if(9===C){if(!(u=t.getElementById(o)))return i;if(u.id===o)return i.push(u),i}else if(E&&(u=E.getElementById(o))&&_(t,u)&&u.id===o)return i.push(u),i}else{if(p[2])return j.apply(i,t.getElementsByTagName(e)),i;if((o=p[3])&&n.getElementsByClassName&&t.getElementsByClassName)return j.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!S[e+" "]&&(!m||!m.test(e))){if(1!==C)E=t,y=e;else if("object"!==t.nodeName.toLowerCase()){for((c=t.getAttribute("id"))?c=c.replace(ee,"\\$&"):t.setAttribute("id",c=b),a=(v=s(e)).length,f=Q.test(c)?"#"+c:"[id='"+c+"']";a--;)v[a]=f+" "+ge(v[a]);y=v.join(","),E=Z.test(e)&&de(t.parentNode)||t}if(y)try{return j.apply(i,E.querySelectorAll(y)),i}catch(e){}finally{c===b&&t.removeAttribute("id")}}}return l(e.replace(B,"$1"),t,i,r)}function oe(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function se(e){return e[b]=!0,e}function ae(e){var t=d.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function ue(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ce(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function he(e){return se(function(t){return t=+t,se(function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function de(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=re.support={},o=re.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},h=re.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:T;return s!==d&&9===s.nodeType&&s.documentElement?(p=(d=s).documentElement,g=!o(d),(r=d.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=ae(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ae(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=z.test(d.getElementsByClassName),n.getById=ae(function(e){return p.appendChild(e).id=b,!d.getElementsByName||!d.getElementsByName(b).length}),n.getById?(i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}},i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}}):(delete i.find.ID,i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=z.test(d.querySelectorAll))&&(ae(function(e){p.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+R+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+R+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+b+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||m.push(".#.+[+~]")}),ae(function(e){var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+R+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=z.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ae(function(e){n.disconnectedMatch=y.call(e,"div"),y.call(e,"[s!='']:x"),v.push("!=",W)}),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=z.test(p.compareDocumentPosition),_=t||z.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return f=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===d||e.ownerDocument===T&&_(T,e)?-1:t===d||t.ownerDocument===T&&_(T,t)?1:c?P(c,e)-P(c,t):0:4&i?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e===d?-1:t===d?1:r?-1:o?1:c?P(c,e)-P(c,t):0;if(r===o)return ue(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ue(s[i],a[i]):s[i]===T?-1:a[i]===T?1:0},d):d},re.matches=function(e,t){return re(e,null,null,t)},re.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&h(e),t=t.replace(K,"='$1']"),n.matchesSelector&&g&&!S[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return re(t,d,null,[e]).length>0},re.contains=function(e,t){return(e.ownerDocument||e)!==d&&h(e),_(e,t)},re.attr=function(e,t){(e.ownerDocument||e)!==d&&h(e);var r=i.attrHandle[t.toLowerCase()],o=r&&N.call(i.attrHandle,t.toLowerCase())?r(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},re.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},re.uniqueSort=function(e){var t,i=[],r=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(A),f){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return c=null,e},r=re.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=re.selectors={cacheLength:50,createPseudo:se,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||re.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&re.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&$.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=w[e+" "];return t||(t=new RegExp("(^|"+R+")"+e+"("+R+"|$)"))&&w(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=re.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(F," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,c,f,h,d,p,g=o!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,_=!1;if(m){if(o){for(;g;){for(h=t;h=h[g];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;p=g="only"===e&&!p&&"nextSibling"}return!0}if(p=[s?m.firstChild:m.lastChild],s&&y){for(_=(d=(u=(c=(f=(h=m)[b]||(h[b]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]||[])[0]===E&&u[1])&&u[2],h=d&&m.childNodes[d];h=++d&&h&&h[g]||(_=d=0)||p.pop();)if(1===h.nodeType&&++_&&h===t){c[e]=[E,d,_];break}}else if(y&&(_=d=(u=(c=(f=(h=t)[b]||(h[b]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]||[])[0]===E&&u[1]),!1===_)for(;(h=++d&&h&&h[g]||(_=d=0)||p.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++_||(y&&((c=(f=h[b]||(h[b]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]=[E,_]),h!==t)););return(_-=r)===i||_%i==0&&_/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||re.error("unsupported pseudo: "+e);return r[b]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var i,o=r(e,t),s=o.length;s--;)e[i=P(e,o[s])]=!(n[i]=o[s])}):function(e){return r(e,0,n)}):r}},pseudos:{not:se(function(e){var t=[],n=[],i=a(e.replace(B,"$1"));return i[b]?se(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return re(e,t).length>0}}),contains:se(function(e){return e=e.replace(te,ne),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:se(function(e){return Q.test(e||"")||re.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return!1===e.disabled},disabled:function(e){return!0===e.disabled},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:he(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=ce(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=fe(t);function pe(){}function ge(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function me(e,t,n){var i=t.dir,r=n&&"parentNode"===i,o=C++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||r)return e(t,n,o)}:function(t,n,s){var a,l,u,c=[E,o];if(s){for(;t=t[i];)if((1===t.nodeType||r)&&e(t,n,s))return!0}else for(;t=t[i];)if(1===t.nodeType||r){if((a=(l=(u=t[b]||(t[b]={}))[t.uniqueID]||(u[t.uniqueID]={}))[i])&&a[0]===E&&a[1]===o)return c[2]=a[2];if(l[i]=c,c[2]=e(t,n,s))return!0}}}function ve(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function ye(e,t,n,i,r){for(var o,s=[],a=0,l=e.length,u=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),u&&t.push(a)));return s}function _e(e,t,n,i,r,o){return i&&!i[b]&&(i=_e(i)),r&&!r[b]&&(r=_e(r,o)),se(function(o,s,a,l){var u,c,f,h=[],d=[],p=s.length,g=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)re(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),m=!e||!o&&t?g:ye(g,h,e,a,l),v=n?r||(o?e:p||i)?[]:s:m;if(n&&n(m,v,a,l),i)for(u=ye(v,d),i(u,[],a,l),c=u.length;c--;)(f=u[c])&&(v[d[c]]=!(m[d[c]]=f));if(o){if(r||e){if(r){for(u=[],c=v.length;c--;)(f=v[c])&&u.push(m[c]=f);r(null,v=[],u,l)}for(c=v.length;c--;)(f=v[c])&&(u=r?P(o,f):h[c])>-1&&(o[u]=!(s[u]=f))}}else v=ye(v===s?v.splice(p,v.length):v),r?r(null,s,v,l):j.apply(s,v)})}function be(e){for(var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],l=s?1:0,c=me(function(e){return e===t},a,!0),f=me(function(e){return P(t,e)>-1},a,!0),h=[function(e,n,i){var r=!s&&(i||n!==u)||((t=n).nodeType?c(e,n,i):f(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])h=[me(ve(h),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[b]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return _e(l>1&&ve(h),l>1&&ge(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(B,"$1"),n,l<r&&be(e.slice(l,r)),r<o&&be(e=e.slice(r)),r<o&&ge(e))}h.push(n)}return ve(h)}return pe.prototype=i.filters=i.pseudos,i.setFilters=new pe,s=re.tokenize=function(e,t){var n,r,o,s,a,l,u,c=x[e+" "];if(c)return t?0:c.slice(0);for(a=e,l=[],u=i.preFilter;a;){for(s in n&&!(r=U.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),n=!1,(r=V.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(B," ")}),a=a.slice(n.length)),i.filter)!(r=Y[s].exec(a))||u[s]&&!(r=u[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?re.error(e):x(e,l).slice(0)},a=re.compile=function(e,t){var n,r,o,a,l,c,f=[],p=[],m=S[e+" "];if(!m){for(t||(t=s(e)),n=t.length;n--;)(m=be(t[n]))[b]?f.push(m):p.push(m);(m=S(e,(r=p,a=(o=f).length>0,l=r.length>0,c=function(e,t,n,s,c){var f,p,m,v=0,y="0",_=e&&[],b=[],T=u,C=e||l&&i.find.TAG("*",c),w=E+=null==T?1:Math.random()||.1,x=C.length;for(c&&(u=t===d||t||c);y!==x&&null!=(f=C[y]);y++){if(l&&f){for(p=0,t||f.ownerDocument===d||(h(f),n=!g);m=r[p++];)if(m(f,t||d,n)){s.push(f);break}c&&(E=w)}a&&((f=!m&&f)&&v--,e&&_.push(f))}if(v+=y,a&&y!==v){for(p=0;m=o[p++];)m(_,b,t,n);if(e){if(v>0)for(;y--;)_[y]||b[y]||(b[y]=k.call(s));b=ye(b)}j.apply(s,b),c&&!e&&b.length>0&&v+o.length>1&&re.uniqueSort(s)}return c&&(E=w,u=T),_},a?se(c):c))).selector=e}return m},l=re.select=function(e,t,r,o){var l,u,c,f,h,d="function"==typeof e&&e,p=!o&&s(e=d.selector||e);if(r=r||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&n.getById&&9===t.nodeType&&g&&i.relative[u[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return r;d&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(l=Y.needsContext.test(e)?0:u.length;l--&&(c=u[l],!i.relative[f=c.type]);)if((h=i.find[f])&&(o=h(c.matches[0].replace(te,ne),Z.test(u[0].type)&&de(t.parentNode)||t))){if(u.splice(l,1),!(e=o.length&&ge(u)))return j.apply(r,o),r;break}}return(d||a(e,p))(o,t,!g,r,!t||Z.test(e)&&de(t.parentNode)||t),r},n.sortStable=b.split("").sort(A).join("")===b,n.detectDuplicates=!!f,h(),n.sortDetached=ae(function(e){return 1&e.compareDocumentPosition(d.createElement("div"))}),ae(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ae(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ae(function(e){return null==e.getAttribute("disabled")})||le(H,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),re}(e);d.find=_,d.expr=_.selectors,d.expr[":"]=d.expr.pseudos,d.uniqueSort=d.unique=_.uniqueSort,d.text=_.getText,d.isXMLDoc=_.isXML,d.contains=_.contains;var b=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&d(e).is(n))break;i.push(e)}return i},T=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},E=d.expr.match.needsContext,C=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(e,t,n){if(d.isFunction(t))return d.grep(e,function(e,i){return!!t.call(e,i,e)!==n});if(t.nodeType)return d.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(w.test(t))return d.filter(t,e,n);t=d.filter(t,e)}return d.grep(e,function(e){return a.call(t,e)>-1!==n})}d.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?d.find.matchesSelector(i,e)?[i]:[]:d.find.matches(e,d.grep(t,function(e){return 1===e.nodeType}))},d.fn.extend({find:function(e){var t,n=this.length,i=[],r=this;if("string"!=typeof e)return this.pushStack(d(e).filter(function(){for(t=0;t<n;t++)if(d.contains(r[t],this))return!0}));for(t=0;t<n;t++)d.find(e,r[t],i);return(i=this.pushStack(n>1?d.unique(i):i)).selector=this.selector?this.selector+" "+e:e,i},filter:function(e){return this.pushStack(x(this,e||[],!1))},not:function(e){return this.pushStack(x(this,e||[],!0))},is:function(e){return!!x(this,"string"==typeof e&&E.test(e)?d(e):e||[],!1).length}});var S,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(d.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||S,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:A.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof d?t[0]:t,d.merge(this,d.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:i,!0)),C.test(r[1])&&d.isPlainObject(t))for(r in t)d.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=i.getElementById(r[2]))&&o.parentNode&&(this.length=1,this[0]=o),this.context=i,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):d.isFunction(e)?void 0!==n.ready?n.ready(e):e(d):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),d.makeArray(e,this))}).prototype=d.fn,S=d(i);var D=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}d.fn.extend({has:function(e){var t=d(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(d.contains(this,t[e]))return!0})},closest:function(e,t){for(var n,i=0,r=this.length,o=[],s=E.test(e)||"string"!=typeof e?d(e,t||this.context):0;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&d.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?d.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?a.call(d(e),this[0]):a.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(d.uniqueSort(d.merge(this.get(),d(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),d.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return b(e,"parentNode")},parentsUntil:function(e,t,n){return b(e,"parentNode",n)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return b(e,"nextSibling")},prevAll:function(e){return b(e,"previousSibling")},nextUntil:function(e,t,n){return b(e,"nextSibling",n)},prevUntil:function(e,t,n){return b(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return e.contentDocument||d.merge([],e.childNodes)}},function(e,t){d.fn[e]=function(n,i){var r=d.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=d.filter(i,r)),this.length>1&&(N[e]||d.uniqueSort(r),D.test(e)&&r.reverse()),this.pushStack(r)}});var k,O=/\S+/g;function j(){i.removeEventListener("DOMContentLoaded",j),e.removeEventListener("load",j),d.ready()}d.Callbacks=function(e){var t,n;e="string"==typeof e?(t=e,n={},d.each(t.match(O)||[],function(e,t){n[t]=!0}),n):d.extend({},e);var i,r,o,s,a=[],l=[],u=-1,c=function(){for(s=e.once,o=i=!0;l.length;u=-1)for(r=l.shift();++u<a.length;)!1===a[u].apply(r[0],r[1])&&e.stopOnFalse&&(u=a.length,r=!1);e.memory||(r=!1),i=!1,s&&(a=r?[]:"")},f={add:function(){return a&&(r&&!i&&(u=a.length-1,l.push(r)),function t(n){d.each(n,function(n,i){d.isFunction(i)?e.unique&&f.has(i)||a.push(i):i&&i.length&&"string"!==d.type(i)&&t(i)})}(arguments),r&&!i&&c()),this},remove:function(){return d.each(arguments,function(e,t){for(var n;(n=d.inArray(t,a,n))>-1;)a.splice(n,1),n<=u&&u--}),this},has:function(e){return e?d.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return s=l=[],a=r="",this},disabled:function(){return!a},lock:function(){return s=l=[],r||(a=r=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],l.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},d.extend({Deferred:function(e){var t=[["resolve","done",d.Callbacks("once memory"),"resolved"],["reject","fail",d.Callbacks("once memory"),"rejected"],["notify","progress",d.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var e=arguments;return d.Deferred(function(n){d.each(t,function(t,o){var s=d.isFunction(e[t])&&e[t];r[o[1]](function(){var e=s&&s.apply(this,arguments);e&&d.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===i?n.promise():this,s?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?d.extend(e,i):i}},r={};return i.pipe=i.then,d.each(t,function(e,o){var s=o[2],a=o[3];i[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=s.fireWith}),i.promise(r),e&&e.call(r,r),r},when:function(e){var t,n,i,o=0,s=r.call(arguments),a=s.length,l=1!==a||e&&d.isFunction(e.promise)?a:0,u=1===l?e:d.Deferred(),c=function(e,n,i){return function(o){n[e]=this,i[e]=arguments.length>1?r.call(arguments):o,i===t?u.notifyWith(n,i):--l||u.resolveWith(n,i)}};if(a>1)for(t=new Array(a),n=new Array(a),i=new Array(a);o<a;o++)s[o]&&d.isFunction(s[o].promise)?s[o].promise().progress(c(o,n,t)).done(c(o,i,s)).fail(u.reject):--l;return l||u.resolveWith(i,s),u.promise()}}),d.fn.ready=function(e){return d.ready.promise().done(e),this},d.extend({isReady:!1,readyWait:1,holdReady:function(e){e?d.readyWait++:d.ready(!0)},ready:function(e){(!0===e?--d.readyWait:d.isReady)||(d.isReady=!0,!0!==e&&--d.readyWait>0||(k.resolveWith(i,[d]),d.fn.triggerHandler&&(d(i).triggerHandler("ready"),d(i).off("ready"))))}}),d.ready.promise=function(t){return k||(k=d.Deferred(),"complete"===i.readyState||"loading"!==i.readyState&&!i.documentElement.doScroll?e.setTimeout(d.ready):(i.addEventListener("DOMContentLoaded",j),e.addEventListener("load",j))),k.promise(t)},d.ready.promise();var L=function(e,t,n,i,r,o,s){var a=0,l=e.length,u=null==n;if("object"===d.type(n))for(a in r=!0,n)L(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,d.isFunction(i)||(s=!0),u&&(s?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(d(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:u?t.call(e):l?t(e[0],n):o},P=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function H(){this.expando=d.expando+H.uid++}H.uid=1,H.prototype={register:function(e,t){var n=t||{};return e.nodeType?e[this.expando]=n:Object.defineProperty(e,this.expando,{value:n,writable:!0,configurable:!0}),e[this.expando]},cache:function(e){if(!P(e))return{};var t=e[this.expando];return t||(t={},P(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[t]=n;else for(i in t)r[i]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][t]},access:function(e,t,n){var i;return void 0===t||t&&"string"==typeof t&&void 0===n?void 0!==(i=this.get(e,t))?i:this.get(e,d.camelCase(t)):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i,r,o=e[this.expando];if(void 0!==o){if(void 0===t)this.register(e);else{d.isArray(t)?i=t.concat(t.map(d.camelCase)):(r=d.camelCase(t),i=t in o?[t,r]:(i=r)in o?[i]:i.match(O)||[]),n=i.length;for(;n--;)delete o[i[n]]}(void 0===t||d.isEmptyObject(o))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!d.isEmptyObject(t)}};var R=new H,q=new H,M=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,W=/[A-Z]/g;function F(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(W,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:M.test(n)?d.parseJSON(n):n)}catch(e){}q.set(e,t,n)}else n=void 0;return n}d.extend({hasData:function(e){return q.hasData(e)||R.hasData(e)},data:function(e,t,n){return q.access(e,t,n)},removeData:function(e,t){q.remove(e,t)},_data:function(e,t,n){return R.access(e,t,n)},_removeData:function(e,t){R.remove(e,t)}}),d.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=q.get(o),1===o.nodeType&&!R.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=d.camelCase(i.slice(5)),F(o,i,r[i]));R.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){q.set(this,e)}):L(this,function(t){var n,i;if(o&&void 0===t)return void 0!==(n=q.get(o,e)||q.get(o,e.replace(W,"-$&").toLowerCase()))?n:(i=d.camelCase(e),void 0!==(n=q.get(o,i))?n:void 0!==(n=F(o,i,void 0))?n:void 0);i=d.camelCase(e),this.each(function(){var n=q.get(this,i);q.set(this,i,t),e.indexOf("-")>-1&&void 0!==n&&q.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){q.remove(this,e)})}}),d.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=R.get(e,t),n&&(!i||d.isArray(n)?i=R.access(e,t,d.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=d.queue(e,t),i=n.length,r=n.shift(),o=d._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){d.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return R.get(e,n)||R.access(e,n,{empty:d.Callbacks("once memory").add(function(){R.remove(e,[t+"queue",n])})})}}),d.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?d.queue(this[0],e):void 0===t?this:this.each(function(){var n=d.queue(this,e,t);d._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&d.dequeue(this,e)})},dequeue:function(e){return this.each(function(){d.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=d.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=R.get(o[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var B=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,U=new RegExp("^(?:([+-])=|)("+B+")([a-z%]*)$","i"),V=["Top","Right","Bottom","Left"],K=function(e,t){return e=t||e,"none"===d.css(e,"display")||!d.contains(e.ownerDocument,e)};function $(e,t,n,i){var r,o=1,s=20,a=i?function(){return i.cur()}:function(){return d.css(e,t,"")},l=a(),u=n&&n[3]||(d.cssNumber[t]?"":"px"),c=(d.cssNumber[t]||"px"!==u&&+l)&&U.exec(d.css(e,t));if(c&&c[3]!==u)for(u=u||c[3],n=n||[],c=+l||1;c/=o=o||".5",d.style(e,t,c+u),o!==(o=a()/l)&&1!==o&&--s;);return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}var Q=/^(?:checkbox|radio)$/i,Y=/<([\w:-]+)/,G=/^$|\/(?:java|ecma)script/i,X={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function z(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&d.nodeName(e,t)?d.merge([e],n):n}function J(e,t){for(var n=0,i=e.length;n<i;n++)R.set(e[n],"globalEval",!t||R.get(t[n],"globalEval"))}X.optgroup=X.option,X.tbody=X.tfoot=X.colgroup=X.caption=X.thead,X.th=X.td;var Z,ee,te=/<|&#?\w+;/;function ne(e,t,n,i,r){for(var o,s,a,l,u,c,f=t.createDocumentFragment(),h=[],p=0,g=e.length;p<g;p++)if((o=e[p])||0===o)if("object"===d.type(o))d.merge(h,o.nodeType?[o]:o);else if(te.test(o)){for(s=s||f.appendChild(t.createElement("div")),a=(Y.exec(o)||["",""])[1].toLowerCase(),l=X[a]||X._default,s.innerHTML=l[1]+d.htmlPrefilter(o)+l[2],c=l[0];c--;)s=s.lastChild;d.merge(h,s.childNodes),(s=f.firstChild).textContent=""}else h.push(t.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(i&&d.inArray(o,i)>-1)r&&r.push(o);else if(u=d.contains(o.ownerDocument,o),s=z(f.appendChild(o),"script"),u&&J(s),n)for(c=0;o=s[c++];)G.test(o.type||"")&&n.push(o);return f}Z=i.createDocumentFragment().appendChild(i.createElement("div")),(ee=i.createElement("input")).setAttribute("type","radio"),ee.setAttribute("checked","checked"),ee.setAttribute("name","t"),Z.appendChild(ee),f.checkClone=Z.cloneNode(!0).cloneNode(!0).lastChild.checked,Z.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!Z.cloneNode(!0).lastChild.defaultValue;var ie=/^key/,re=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,oe=/^([^.]*)(?:\.(.+)|)/;function se(){return!0}function ae(){return!1}function le(){try{return i.activeElement}catch(e){}}function ue(e,t,n,i,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)ue(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=ae;else if(!r)return e;return 1===o&&(s=r,(r=function(e){return d().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=d.guid++)),e.each(function(){d.event.add(this,t,r,i,n)})}d.event={global:{},add:function(e,t,n,i,r){var o,s,a,l,u,c,f,h,p,g,m,v=R.get(e);if(v)for(n.handler&&(n=(o=n).handler,r=o.selector),n.guid||(n.guid=d.guid++),(l=v.events)||(l=v.events={}),(s=v.handle)||(s=v.handle=function(t){return void 0!==d&&d.event.triggered!==t.type?d.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(O)||[""]).length;u--;)p=m=(a=oe.exec(t[u])||[])[1],g=(a[2]||"").split(".").sort(),p&&(f=d.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,f=d.event.special[p]||{},c=d.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&d.expr.match.needsContext.test(r),namespace:g.join(".")},o),(h=l[p])||((h=l[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,i,g,s)||e.addEventListener&&e.addEventListener(p,s)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,c):h.push(c),d.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,s,a,l,u,c,f,h,p,g,m,v=R.hasData(e)&&R.get(e);if(v&&(l=v.events)){for(u=(t=(t||"").match(O)||[""]).length;u--;)if(p=m=(a=oe.exec(t[u])||[])[1],g=(a[2]||"").split(".").sort(),p){for(f=d.event.special[p]||{},h=l[p=(i?f.delegateType:f.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=h.length;o--;)c=h[o],!r&&m!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,f.remove&&f.remove.call(e,c));s&&!h.length&&(f.teardown&&!1!==f.teardown.call(e,g,v.handle)||d.removeEvent(e,p,v.handle),delete l[p])}else for(p in l)d.event.remove(e,p+t[u],n,i,!0);d.isEmptyObject(l)&&R.remove(e,"handle events")}},dispatch:function(e){e=d.event.fix(e);var t,n,i,o,s,a,l=r.call(arguments),u=(R.get(this,"events")||{})[e.type]||[],c=d.event.special[e.type]||{};if(l[0]=e,e.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,e)){for(a=d.event.handlers.call(this,e,u),t=0;(o=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=o.elem,n=0;(s=o.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(s.namespace)||(e.handleObj=s,e.data=s.data,void 0!==(i=((d.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,l))&&!1===(e.result=i)&&(e.preventDefault(),e.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,r,o,s=[],a=t.delegateCount,l=e.target;if(a&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==e.type)){for(i=[],n=0;n<a;n++)void 0===i[r=(o=t[n]).selector+" "]&&(i[r]=o.needsContext?d(r,this).index(l)>-1:d.find(r,this,null,[l]).length),i[r]&&i.push(o);i.length&&s.push({elem:l,handlers:i})}return a<t.length&&s.push({elem:this,handlers:t.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,o,s=t.button;return null==e.pageX&&null!=t.clientX&&(r=(n=e.target.ownerDocument||i).documentElement,o=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||o&&o.scrollLeft||0)-(r&&r.clientLeft||o&&o.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||o&&o.scrollTop||0)-(r&&r.clientTop||o&&o.clientTop||0)),e.which||void 0===s||(e.which=1&s?1:2&s?3:4&s?2:0),e}},fix:function(e){if(e[d.expando])return e;var t,n,r,o=e.type,s=e,a=this.fixHooks[o];for(a||(this.fixHooks[o]=a=re.test(o)?this.mouseHooks:ie.test(o)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new d.Event(s),t=r.length;t--;)e[n=r[t]]=s[n];return e.target||(e.target=i),3===e.target.nodeType&&(e.target=e.target.parentNode),a.filter?a.filter(e,s):e},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==le()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===le()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&d.nodeName(this,"input"))return this.click(),!1},_default:function(e){return d.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},d.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},d.Event=function(e,t){if(!(this instanceof d.Event))return new d.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?se:ae):this.type=e,t&&d.extend(this,t),this.timeStamp=e&&e.timeStamp||d.now(),this[d.expando]=!0},d.Event.prototype={constructor:d.Event,isDefaultPrevented:ae,isPropagationStopped:ae,isImmediatePropagationStopped:ae,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},d.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){d.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||d.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),d.fn.extend({on:function(e,t,n,i){return ue(this,e,t,n,i)},one:function(e,t,n,i){return ue(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,d(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ae),this.each(function(){d.event.remove(this,e,n,t)})}});var ce=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,fe=/<script|<style|<link/i,he=/checked\s*(?:[^=]|=\s*.checked.)/i,de=/^true\/(.*)/,pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function ge(e,t){return d.nodeName(e,"table")&&d.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function me(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function ve(e){var t=de.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function ye(e,t){var n,i,r,o,s,a,l,u;if(1===t.nodeType){if(R.hasData(e)&&(o=R.access(e),s=R.set(t,o),u=o.events))for(r in delete s.handle,s.events={},u)for(n=0,i=u[r].length;n<i;n++)d.event.add(t,r,u[r][n]);q.hasData(e)&&(a=q.access(e),l=d.extend({},a),q.set(t,l))}}function _e(e,t,n,i){t=o.apply([],t);var r,s,a,l,u,c,h=0,p=e.length,g=p-1,m=t[0],v=d.isFunction(m);if(v||p>1&&"string"==typeof m&&!f.checkClone&&he.test(m))return e.each(function(r){var o=e.eq(r);v&&(t[0]=m.call(this,r,o.html())),_e(o,t,n,i)});if(p&&(s=(r=ne(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=s),s||i)){for(l=(a=d.map(z(r,"script"),me)).length;h<p;h++)u=r,h!==g&&(u=d.clone(u,!0,!0),l&&d.merge(a,z(u,"script"))),n.call(e[h],u,h);if(l)for(c=a[a.length-1].ownerDocument,d.map(a,ve),h=0;h<l;h++)u=a[h],G.test(u.type||"")&&!R.access(u,"globalEval")&&d.contains(c,u)&&(u.src?d._evalUrl&&d._evalUrl(u.src):d.globalEval(u.textContent.replace(pe,"")))}return e}function be(e,t,n){for(var i,r=t?d.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||d.cleanData(z(i)),i.parentNode&&(n&&d.contains(i.ownerDocument,i)&&J(z(i,"script")),i.parentNode.removeChild(i));return e}d.extend({htmlPrefilter:function(e){return e.replace(ce,"<$1></$2>")},clone:function(e,t,n){var i,r,o,s,a,l,u,c=e.cloneNode(!0),h=d.contains(e.ownerDocument,e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||d.isXMLDoc(e)))for(s=z(c),i=0,r=(o=z(e)).length;i<r;i++)a=o[i],l=s[i],void 0,"input"===(u=l.nodeName.toLowerCase())&&Q.test(a.type)?l.checked=a.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=a.defaultValue);if(t)if(n)for(o=o||z(e),s=s||z(c),i=0,r=o.length;i<r;i++)ye(o[i],s[i]);else ye(e,c);return(s=z(c,"script")).length>0&&J(s,!h&&z(e,"script")),c},cleanData:function(e){for(var t,n,i,r=d.event.special,o=0;void 0!==(n=e[o]);o++)if(P(n)){if(t=n[R.expando]){if(t.events)for(i in t.events)r[i]?d.event.remove(n,i):d.removeEvent(n,i,t.handle);n[R.expando]=void 0}n[q.expando]&&(n[q.expando]=void 0)}}}),d.fn.extend({domManip:_e,detach:function(e){return be(this,e,!0)},remove:function(e){return be(this,e)},text:function(e){return L(this,function(e){return void 0===e?d.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return _e(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ge(this,e).appendChild(e)})},prepend:function(){return _e(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ge(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return _e(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return _e(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(d.cleanData(z(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return d.clone(this,e,t)})},html:function(e){return L(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!fe.test(e)&&!X[(Y.exec(e)||["",""])[1].toLowerCase()]){e=d.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(d.cleanData(z(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return _e(this,arguments,function(t){var n=this.parentNode;d.inArray(this,e)<0&&(d.cleanData(z(this)),n&&n.replaceChild(t,this))},e)}}),d.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){d.fn[e]=function(e){for(var n,i=[],r=d(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),d(r[a])[t](n),s.apply(i,n.get());return this.pushStack(i)}});var Te,Ee={HTML:"block",BODY:"block"};function Ce(e,t){var n=d(t.createElement(e)).appendTo(t.body),i=d.css(n[0],"display");return n.detach(),i}function we(e){var t=i,n=Ee[e];return n||("none"!==(n=Ce(e,t))&&n||((t=(Te=(Te||d("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement))[0].contentDocument).write(),t.close(),n=Ce(e,t),Te.detach()),Ee[e]=n),n}var xe=/^margin/,Se=new RegExp("^("+B+")(?!px)[a-z%]+$","i"),Ae=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},De=function(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in r=n.apply(e,i||[]),t)e.style[o]=s[o];return r},Ne=i.documentElement;function Ie(e,t,n){var i,r,o,s,a=e.style;return""!==(s=(n=n||Ae(e))?n.getPropertyValue(t)||n[t]:void 0)&&void 0!==s||d.contains(e.ownerDocument,e)||(s=d.style(e,t)),n&&!f.pixelMarginRight()&&Se.test(s)&&xe.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o),void 0!==s?s+"":s}function ke(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){var t,n,r,o,s=i.createElement("div"),a=i.createElement("div");function l(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Ne.appendChild(s);var i=e.getComputedStyle(a);t="1%"!==i.top,o="2px"===i.marginLeft,n="4px"===i.width,a.style.marginRight="50%",r="4px"===i.marginRight,Ne.removeChild(s)}a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),d.extend(f,{pixelPosition:function(){return l(),t},boxSizingReliable:function(){return null==n&&l(),n},pixelMarginRight:function(){return null==n&&l(),r},reliableMarginLeft:function(){return null==n&&l(),o},reliableMarginRight:function(){var t,n=a.appendChild(i.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",Ne.appendChild(s),t=!parseFloat(e.getComputedStyle(n).marginRight),Ne.removeChild(s),a.removeChild(n),t}}))}();var Oe=/^(none|table(?!-c[ea]).+)/,je={position:"absolute",visibility:"hidden",display:"block"},Le={letterSpacing:"0",fontWeight:"400"},Pe=["Webkit","O","Moz","ms"],He=i.createElement("div").style;function Re(e){if(e in He)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Pe.length;n--;)if((e=Pe[n]+t)in He)return e}function qe(e,t,n){var i=U.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Me(e,t,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===t?1:0,s=0;o<4;o+=2)"margin"===n&&(s+=d.css(e,n+V[o],!0,r)),i?("content"===n&&(s-=d.css(e,"padding"+V[o],!0,r)),"margin"!==n&&(s-=d.css(e,"border"+V[o]+"Width",!0,r))):(s+=d.css(e,"padding"+V[o],!0,r),"padding"!==n&&(s+=d.css(e,"border"+V[o]+"Width",!0,r)));return s}function We(e,t,n){var i=!0,r="width"===t?e.offsetWidth:e.offsetHeight,o=Ae(e),s="border-box"===d.css(e,"boxSizing",!1,o);if(r<=0||null==r){if(((r=Ie(e,t,o))<0||null==r)&&(r=e.style[t]),Se.test(r))return r;i=s&&(f.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+Me(e,t,n||(s?"border":"content"),i,o)+"px"}function Fe(e,t){for(var n,i,r,o=[],s=0,a=e.length;s<a;s++)(i=e[s]).style&&(o[s]=R.get(i,"olddisplay"),n=i.style.display,t?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&K(i)&&(o[s]=R.access(i,"olddisplay",we(i.nodeName)))):(r=K(i),"none"===n&&r||R.set(i,"olddisplay",r?n:d.css(i,"display"))));for(s=0;s<a;s++)(i=e[s]).style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?o[s]||"":"none"));return e}function Be(e,t,n,i,r){return new Be.prototype.init(e,t,n,i,r)}d.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ie(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=d.camelCase(t),l=e.style;if(t=d.cssProps[a]||(d.cssProps[a]=Re(a)||a),s=d.cssHooks[t]||d.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:l[t];"string"===(o=typeof n)&&(r=U.exec(n))&&r[1]&&(n=$(e,t,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(d.cssNumber[a]?"":"px")),f.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l[t]=n))}},css:function(e,t,n,i){var r,o,s,a=d.camelCase(t);return t=d.cssProps[a]||(d.cssProps[a]=Re(a)||a),(s=d.cssHooks[t]||d.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=Ie(e,t,i)),"normal"===r&&t in Le&&(r=Le[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),d.each(["height","width"],function(e,t){d.cssHooks[t]={get:function(e,n,i){if(n)return Oe.test(d.css(e,"display"))&&0===e.offsetWidth?De(e,je,function(){return We(e,t,i)}):We(e,t,i)},set:function(e,n,i){var r,o=i&&Ae(e),s=i&&Me(e,t,i,"border-box"===d.css(e,"boxSizing",!1,o),o);return s&&(r=U.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=d.css(e,t)),qe(0,n,s)}}}),d.cssHooks.marginLeft=ke(f.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ie(e,"marginLeft"))||e.getBoundingClientRect().left-De(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),d.cssHooks.marginRight=ke(f.reliableMarginRight,function(e,t){if(t)return De(e,{display:"inline-block"},Ie,[e,"marginRight"])}),d.each({margin:"",padding:"",border:"Width"},function(e,t){d.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+V[i]+t]=o[i]||o[i-2]||o[0];return r}},xe.test(e)||(d.cssHooks[e+t].set=qe)}),d.fn.extend({css:function(e,t){return L(this,function(e,t,n){var i,r,o={},s=0;if(d.isArray(t)){for(i=Ae(e),r=t.length;s<r;s++)o[t[s]]=d.css(e,t[s],!1,i);return o}return void 0!==n?d.style(e,t,n):d.css(e,t)},e,t,arguments.length>1)},show:function(){return Fe(this,!0)},hide:function(){return Fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){K(this)?d(this).show():d(this).hide()})}}),d.Tween=Be,(Be.prototype={constructor:Be,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||d.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(d.cssNumber[n]?"":"px")},cur:function(){var e=Be.propHooks[this.prop];return e&&e.get?e.get(this):Be.propHooks._default.get(this)},run:function(e){var t,n=Be.propHooks[this.prop];return this.options.duration?this.pos=t=d.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Be.propHooks._default.set(this),this}}).init.prototype=Be.prototype,(Be.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=d.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){d.fx.step[e.prop]?d.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[d.cssProps[e.prop]]&&!d.cssHooks[e.prop]?e.elem[e.prop]=e.now:d.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=Be.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},d.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},d.fx=Be.prototype.init,d.fx.step={};var Ue,Ve,Ke,$e,Qe,Ye=/^(?:toggle|show|hide)$/,Ge=/queueHooks$/;function Xe(){return e.setTimeout(function(){Ue=void 0}),Ue=d.now()}function ze(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=V[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function Je(e,t,n){for(var i,r=(Ze.tweeners[t]||[]).concat(Ze.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function Ze(e,t,n){var i,r,o=0,s=Ze.prefilters.length,a=d.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=Ue||Xe(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),o=0,s=u.tweens.length;o<s;o++)u.tweens[o].run(i);return a.notifyWith(e,[u,i,n]),i<1&&s?n:(a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:d.extend({},t),opts:d.extend(!0,{specialEasing:{},easing:d.easing._default},n),originalProperties:t,originalOptions:n,startTime:Ue||Xe(),duration:n.duration,tweens:[],createTween:function(t,n){var i=d.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),c=u.props;for(!function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=d.camelCase(n)],o=e[n],d.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=d.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(c,u.opts.specialEasing);o<s;o++)if(i=Ze.prefilters[o].call(u,e,c,u.opts))return d.isFunction(i.stop)&&(d._queueHooks(u.elem,u.opts.queue).stop=d.proxy(i.stop,i)),i;return d.map(c,Je,u),d.isFunction(u.opts.start)&&u.opts.start.call(e,u),d.fx.timer(d.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}d.Animation=d.extend(Ze,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return $(n.elem,e,U.exec(t),n),n}]},tweener:function(e,t){d.isFunction(e)?(t=e,e=["*"]):e=e.match(O);for(var n,i=0,r=e.length;i<r;i++)n=e[i],Ze.tweeners[n]=Ze.tweeners[n]||[],Ze.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,l,u,c=this,f={},h=e.style,p=e.nodeType&&K(e),g=R.get(e,"fxshow");for(i in n.queue||(null==(a=d._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,c.always(function(){c.always(function(){a.unqueued--,d.queue(e,"fx").length||a.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],"inline"===("none"===(u=d.css(e,"display"))?R.get(e,"olddisplay")||we(e.nodeName):u)&&"none"===d.css(e,"float")&&(h.display="inline-block")),n.overflow&&(h.overflow="hidden",c.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),t)if(r=t[i],Ye.exec(r)){if(delete t[i],o=o||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;p=!0}f[i]=g&&g[i]||d.style(e,i)}else u=void 0;if(d.isEmptyObject(f))"inline"===("none"===u?we(e.nodeName):u)&&(h.display=u);else for(i in g?"hidden"in g&&(p=g.hidden):g=R.access(e,"fxshow",{}),o&&(g.hidden=!p),p?d(e).show():c.done(function(){d(e).hide()}),c.done(function(){var t;for(t in R.remove(e,"fxshow"),f)d.style(e,t,f[t])}),f)s=Je(p?g[i]:0,i,c),i in g||(g[i]=s.start,p&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}],prefilter:function(e,t){t?Ze.prefilters.unshift(e):Ze.prefilters.push(e)}}),d.speed=function(e,t,n){var i=e&&"object"==typeof e?d.extend({},e):{complete:n||!n&&t||d.isFunction(e)&&e,duration:e,easing:n&&t||t&&!d.isFunction(t)&&t};return i.duration=d.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in d.fx.speeds?d.fx.speeds[i.duration]:d.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){d.isFunction(i.old)&&i.old.call(this),i.queue&&d.dequeue(this,i.queue)},i},d.fn.extend({fadeTo:function(e,t,n,i){return this.filter(K).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=d.isEmptyObject(e),o=d.speed(t,n,i),s=function(){var t=Ze(this,d.extend({},e),o);(r||R.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=d.timers,s=R.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&Ge.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||d.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=R.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=d.timers,s=i?i.length:0;for(n.finish=!0,d.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),d.each(["toggle","show","hide"],function(e,t){var n=d.fn[t];d.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ze(t,!0),e,i,r)}}),d.each({slideDown:ze("show"),slideUp:ze("hide"),slideToggle:ze("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){d.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),d.timers=[],d.fx.tick=function(){var e,t=0,n=d.timers;for(Ue=d.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||d.fx.stop(),Ue=void 0},d.fx.timer=function(e){d.timers.push(e),e()?d.fx.start():d.timers.pop()},d.fx.interval=13,d.fx.start=function(){Ve||(Ve=e.setInterval(d.fx.tick,d.fx.interval))},d.fx.stop=function(){e.clearInterval(Ve),Ve=null},d.fx.speeds={slow:600,fast:200,_default:400},d.fn.delay=function(t,n){return t=d.fx&&d.fx.speeds[t]||t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},Ke=i.createElement("input"),$e=i.createElement("select"),Qe=$e.appendChild(i.createElement("option")),Ke.type="checkbox",f.checkOn=""!==Ke.value,f.optSelected=Qe.selected,$e.disabled=!0,f.optDisabled=!Qe.disabled,(Ke=i.createElement("input")).value="t",Ke.type="radio",f.radioValue="t"===Ke.value;var et,tt=d.expr.attrHandle;d.fn.extend({attr:function(e,t){return L(this,d.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){d.removeAttr(this,e)})}}),d.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?d.prop(e,t,n):(1===o&&d.isXMLDoc(e)||(t=t.toLowerCase(),r=d.attrHooks[t]||(d.expr.match.bool.test(t)?et:void 0)),void 0!==n?null===n?void d.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=d.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&"radio"===t&&d.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i,r=0,o=t&&t.match(O);if(o&&1===e.nodeType)for(;n=o[r++];)i=d.propFix[n]||n,d.expr.match.bool.test(n)&&(e[i]=!1),e.removeAttribute(n)}}),et={set:function(e,t,n){return!1===t?d.removeAttr(e,n):e.setAttribute(n,n),n}},d.each(d.expr.match.bool.source.match(/\w+/g),function(e,t){var n=tt[t]||d.find.attr;tt[t]=function(e,t,i){var r,o;return i||(o=tt[t],tt[t]=r,r=null!=n(e,t,i)?t.toLowerCase():null,tt[t]=o),r}});var nt=/^(?:input|select|textarea|button)$/i,it=/^(?:a|area)$/i;d.fn.extend({prop:function(e,t){return L(this,d.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[d.propFix[e]||e]})}}),d.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&d.isXMLDoc(e)||(t=d.propFix[t]||t,r=d.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=d.find.attr(e,"tabindex");return t?parseInt(t,10):nt.test(e.nodeName)||it.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(d.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),d.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){d.propFix[this.toLowerCase()]=this});var rt=/[\t\r\n\f]/g;function ot(e){return e.getAttribute&&e.getAttribute("class")||""}d.fn.extend({addClass:function(e){var t,n,i,r,o,s,a,l=0;if(d.isFunction(e))return this.each(function(t){d(this).addClass(e.call(this,t,ot(this)))});if("string"==typeof e&&e)for(t=e.match(O)||[];n=this[l++];)if(r=ot(n),i=1===n.nodeType&&(" "+r+" ").replace(rt," ")){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=d.trim(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,o,s,a,l=0;if(d.isFunction(e))return this.each(function(t){d(this).removeClass(e.call(this,t,ot(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(O)||[];n=this[l++];)if(r=ot(n),i=1===n.nodeType&&(" "+r+" ").replace(rt," ")){for(s=0;o=t[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=d.trim(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):d.isFunction(e)?this.each(function(n){d(this).toggleClass(e.call(this,n,ot(this),t),t)}):this.each(function(){var t,i,r,o;if("string"===n)for(i=0,r=d(this),o=e.match(O)||[];t=o[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=ot(this))&&R.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":R.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+ot(n)+" ").replace(rt," ").indexOf(t)>-1)return!0;return!1}});var st=/\r/g,at=/[\x20\t\r\n\f]+/g;d.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=d.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,d(this).val()):e)?r="":"number"==typeof r?r+="":d.isArray(r)&&(r=d.map(r,function(e){return null==e?"":e+""})),(t=d.valHooks[this.type]||d.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=d.valHooks[r.type]||d.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(st,""):null==n?"":n:void 0}}),d.extend({valHooks:{option:{get:function(e){var t=d.find.attr(e,"value");return null!=t?t:d.trim(d.text(e)).replace(at," ")}},select:{get:function(e){for(var t,n,i=e.options,r=e.selectedIndex,o="select-one"===e.type||r<0,s=o?null:[],a=o?r+1:i.length,l=r<0?a:o?r:0;l<a;l++)if(((n=i[l]).selected||l===r)&&(f.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!d.nodeName(n.parentNode,"optgroup"))){if(t=d(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=d.makeArray(t),s=r.length;s--;)((i=r[s]).selected=d.inArray(d.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),d.each(["radio","checkbox"],function(){d.valHooks[this]={set:function(e,t){if(d.isArray(t))return e.checked=d.inArray(d(e).val(),t)>-1}},f.checkOn||(d.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var lt=/^(?:focusinfocus|focusoutblur)$/;d.extend(d.event,{trigger:function(t,n,r,o){var s,a,l,u,f,h,p,g=[r||i],m=c.call(t,"type")?t.type:t,v=c.call(t,"namespace")?t.namespace.split("."):[];if(a=l=r=r||i,3!==r.nodeType&&8!==r.nodeType&&!lt.test(m+d.event.triggered)&&(m.indexOf(".")>-1&&(m=(v=m.split(".")).shift(),v.sort()),f=m.indexOf(":")<0&&"on"+m,(t=t[d.expando]?t:new d.Event(m,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:d.makeArray(n,[t]),p=d.event.special[m]||{},o||!p.trigger||!1!==p.trigger.apply(r,n))){if(!o&&!p.noBubble&&!d.isWindow(r)){for(u=p.delegateType||m,lt.test(u+m)||(a=a.parentNode);a;a=a.parentNode)g.push(a),l=a;l===(r.ownerDocument||i)&&g.push(l.defaultView||l.parentWindow||e)}for(s=0;(a=g[s++])&&!t.isPropagationStopped();)t.type=s>1?u:p.bindType||m,(h=(R.get(a,"events")||{})[t.type]&&R.get(a,"handle"))&&h.apply(a,n),(h=f&&a[f])&&h.apply&&P(a)&&(t.result=h.apply(a,n),!1===t.result&&t.preventDefault());return t.type=m,o||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(g.pop(),n)||!P(r)||f&&d.isFunction(r[m])&&!d.isWindow(r)&&((l=r[f])&&(r[f]=null),d.event.triggered=m,r[m](),d.event.triggered=void 0,l&&(r[f]=l)),t.result}},simulate:function(e,t,n){var i=d.extend(new d.Event,n,{type:e,isSimulated:!0});d.event.trigger(i,null,t)}}),d.fn.extend({trigger:function(e,t){return this.each(function(){d.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return d.event.trigger(e,t,n,!0)}}),d.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){d.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),d.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),f.focusin="onfocusin"in e,f.focusin||d.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){d.event.simulate(t,e.target,d.event.fix(e))};d.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=R.access(i,t);r||i.addEventListener(e,n,!0),R.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=R.access(i,t)-1;r?R.access(i,t,r):(i.removeEventListener(e,n,!0),R.remove(i,t))}}});var ut=e.location,ct=d.now(),ft=/\?/;d.parseJSON=function(e){return JSON.parse(e+"")},d.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||d.error("Invalid XML: "+t),n};var ht=/#.*$/,dt=/([?&])_=[^&]*/,pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,gt=/^(?:GET|HEAD)$/,mt=/^\/\//,vt={},yt={},_t="*/".concat("*"),bt=i.createElement("a");function Tt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(O)||[];if(d.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Et(e,t,n,i){var r={},o=e===yt;function s(a){var l;return r[a]=!0,d.each(e[a]||[],function(e,a){var u=a(t,n,i);return"string"!=typeof u||o||r[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),s(u),!1)}),l}return s(t.dataTypes[0])||!r["*"]&&s("*")}function Ct(e,t){var n,i,r=d.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&d.extend(!0,e,i),e}bt.href=ut.href,d.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ut.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ut.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":_t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":d.parseJSON,"text xml":d.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ct(Ct(e,d.ajaxSettings),t):Ct(d.ajaxSettings,e)},ajaxPrefilter:Tt(vt),ajaxTransport:Tt(yt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,o,s,a,l,u,c,f,h=d.ajaxSetup({},n),p=h.context||h,g=h.context&&(p.nodeType||p.jquery)?d(p):d.event,m=d.Deferred(),v=d.Callbacks("once memory"),y=h.statusCode||{},_={},b={},T=0,E="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(2===T){if(!a)for(a={};t=pt.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===T?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return T||(e=b[n]=b[n]||e,_[e]=t),this},overrideMimeType:function(e){return T||(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(T<2)for(t in e)y[t]=[y[t],e[t]];else C.always(e[C.status]);return this},abort:function(e){var t=e||E;return r&&r.abort(t),w(0,t),this}};if(m.promise(C).complete=v.add,C.success=C.done,C.error=C.fail,h.url=((t||h.url||ut.href)+"").replace(ht,"").replace(mt,ut.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=d.trim(h.dataType||"*").toLowerCase().match(O)||[""],null==h.crossDomain){u=i.createElement("a");try{u.href=h.url,u.href=u.href,h.crossDomain=bt.protocol+"//"+bt.host!=u.protocol+"//"+u.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=d.param(h.data,h.traditional)),Et(vt,h,n,C),2===T)return C;for(f in(c=d.event&&h.global)&&0==d.active++&&d.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!gt.test(h.type),o=h.url,h.hasContent||(h.data&&(o=h.url+=(ft.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(h.url=dt.test(o)?o.replace(dt,"$1_="+ct++):o+(ft.test(o)?"&":"?")+"_="+ct++)),h.ifModified&&(d.lastModified[o]&&C.setRequestHeader("If-Modified-Since",d.lastModified[o]),d.etag[o]&&C.setRequestHeader("If-None-Match",d.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+_t+"; q=0.01":""):h.accepts["*"]),h.headers)C.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(p,C,h)||2===T))return C.abort();for(f in E="abort",{success:1,error:1,complete:1})C[f](h[f]);if(r=Et(yt,h,n,C)){if(C.readyState=1,c&&g.trigger("ajaxSend",[C,h]),2===T)return C;h.async&&h.timeout>0&&(l=e.setTimeout(function(){C.abort("timeout")},h.timeout));try{T=1,r.send(_,w)}catch(e){if(!(T<2))throw e;w(-1,e)}}else w(-1,"No Transport");function w(t,n,i,a){var u,f,_,b,E,w=n;2!==T&&(T=2,l&&e.clearTimeout(l),r=void 0,s=a||"",C.readyState=t>0?4:0,u=t>=200&&t<300||304===t,i&&(b=function(e,t,n){for(var i,r,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(h,C,i)),b=function(e,t,n,i){var r,o,s,a,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=u[l+" "+o]||u["* "+o]))for(r in u)if((a=r.split(" "))[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[r]:!0!==u[r]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(h,b,C,u),u?(h.ifModified&&((E=C.getResponseHeader("Last-Modified"))&&(d.lastModified[o]=E),(E=C.getResponseHeader("etag"))&&(d.etag[o]=E)),204===t||"HEAD"===h.type?w="nocontent":304===t?w="notmodified":(w=b.state,f=b.data,u=!(_=b.error))):(_=w,!t&&w||(w="error",t<0&&(t=0))),C.status=t,C.statusText=(n||w)+"",u?m.resolveWith(p,[f,w,C]):m.rejectWith(p,[C,w,_]),C.statusCode(y),y=void 0,c&&g.trigger(u?"ajaxSuccess":"ajaxError",[C,h,u?f:_]),v.fireWith(p,[C,w]),c&&(g.trigger("ajaxComplete",[C,h]),--d.active||d.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return d.get(e,t,n,"json")},getScript:function(e,t){return d.get(e,void 0,t,"script")}}),d.each(["get","post"],function(e,t){d[t]=function(e,n,i,r){return d.isFunction(n)&&(r=r||i,i=n,n=void 0),d.ajax(d.extend({url:e,type:t,dataType:r,data:n,success:i},d.isPlainObject(e)&&e))}}),d._evalUrl=function(e){return d.ajax({url:e,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},d.fn.extend({wrapAll:function(e){var t;return d.isFunction(e)?this.each(function(t){d(this).wrapAll(e.call(this,t))}):(this[0]&&(t=d(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return d.isFunction(e)?this.each(function(t){d(this).wrapInner(e.call(this,t))}):this.each(function(){var t=d(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=d.isFunction(e);return this.each(function(n){d(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){d.nodeName(this,"body")||d(this).replaceWith(this.childNodes)}).end()}}),d.expr.filters.hidden=function(e){return!d.expr.filters.visible(e)},d.expr.filters.visible=function(e){return e.offsetWidth>0||e.offsetHeight>0||e.getClientRects().length>0};var wt=/%20/g,xt=/\[\]$/,St=/\r?\n/g,At=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;function Nt(e,t,n,i){var r;if(d.isArray(t))d.each(t,function(t,r){n||xt.test(e)?i(e,r):Nt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==d.type(t))i(e,t);else for(r in t)Nt(e+"["+r+"]",t[r],n,i)}d.param=function(e,t){var n,i=[],r=function(e,t){t=d.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=d.ajaxSettings&&d.ajaxSettings.traditional),d.isArray(e)||e.jquery&&!d.isPlainObject(e))d.each(e,function(){r(this.name,this.value)});else for(n in e)Nt(n,e[n],t,r);return i.join("&").replace(wt,"+")},d.fn.extend({serialize:function(){return d.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=d.prop(this,"elements");return e?d.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!d(this).is(":disabled")&&Dt.test(this.nodeName)&&!At.test(e)&&(this.checked||!Q.test(e))}).map(function(e,t){var n=d(this).val();return null==n?null:d.isArray(n)?d.map(n,function(e){return{name:t.name,value:e.replace(St,"\r\n")}}):{name:t.name,value:n.replace(St,"\r\n")}}).get()}}),d.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var It={0:200,1223:204},kt=d.ajaxSettings.xhr();f.cors=!!kt&&"withCredentials"in kt,f.ajax=kt=!!kt,d.ajaxTransport(function(t){var n,i;if(f.cors||kt&&!t.crossDomain)return{send:function(r,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);n=function(e){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(It[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),d.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return d.globalEval(e),e}}}),d.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),d.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,o){t=d("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),i.head.appendChild(t[0])},abort:function(){n&&n()}}});var Ot=[],jt=/(=)\?(?=&|$)|\?\?/;d.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ot.pop()||d.expando+"_"+ct++;return this[e]=!0,e}}),d.ajaxPrefilter("json jsonp",function(t,n,i){var r,o,s,a=!1!==t.jsonp&&(jt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&jt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=d.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(jt,"$1"+r):!1!==t.jsonp&&(t.url+=(ft.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||d.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=e[r],e[r]=function(){s=arguments},i.always(function(){void 0===o?d(e).removeProp(r):e[r]=o,t[r]&&(t.jsonpCallback=n.jsonpCallback,Ot.push(r)),s&&d.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),d.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||i;var r=C.exec(e),o=!n&&[];return r?[t.createElement(r[1])]:(r=ne([e],t,o),o&&o.length&&d(o).remove(),d.merge([],r.childNodes))};var Lt=d.fn.load;function Pt(e){return d.isWindow(e)?e:9===e.nodeType&&e.defaultView}d.fn.load=function(e,t,n){if("string"!=typeof e&&Lt)return Lt.apply(this,arguments);var i,r,o,s=this,a=e.indexOf(" ");return a>-1&&(i=d.trim(e.slice(a)),e=e.slice(0,a)),d.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&d.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(i?d("<div>").append(d.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},d.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){d.fn[t]=function(e){return this.on(t,e)}}),d.expr.filters.animated=function(e){return d.grep(d.timers,function(t){return e===t.elem}).length},d.offset={setOffset:function(e,t,n){var i,r,o,s,a,l,u=d.css(e,"position"),c=d(e),f={};"static"===u&&(e.style.position="relative"),a=c.offset(),o=d.css(e,"top"),l=d.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(s=(i=c.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),d.isFunction(t)&&(t=t.call(e,n,d.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+r),"using"in t?t.using.call(e,f):c.css(f)}},d.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){d.offset.setOffset(this,e,t)});var t,n,i=this[0],r={top:0,left:0},o=i&&i.ownerDocument;return o?(t=o.documentElement,d.contains(t,i)?(r=i.getBoundingClientRect(),n=Pt(o),{top:r.top+n.pageYOffset-t.clientTop,left:r.left+n.pageXOffset-t.clientLeft}):r):void 0},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===d.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),d.nodeName(e[0],"html")||(i=e.offset()),i.top+=d.css(e[0],"borderTopWidth",!0),i.left+=d.css(e[0],"borderLeftWidth",!0)),{top:t.top-i.top-d.css(n,"marginTop",!0),left:t.left-i.left-d.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===d.css(e,"position");)e=e.offsetParent;return e||Ne})}}),d.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;d.fn[e]=function(i){return L(this,function(e,i,r){var o=Pt(e);if(void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r},e,i,arguments.length)}}),d.each(["top","left"],function(e,t){d.cssHooks[t]=ke(f.pixelPosition,function(e,n){if(n)return n=Ie(e,t),Se.test(n)?d(e).position()[t]+"px":n})}),d.each({Height:"height",Width:"width"},function(e,t){d.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){d.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===r?"margin":"border");return L(this,function(t,n,i){var r;return d.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===i?d.css(t,n,s):d.style(t,n,i,s)},t,o?i:void 0,o,null)}})}),d.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},size:function(){return this.length}}),d.fn.andSelf=d.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return d});var Ht=e.jQuery,Rt=e.$;return d.noConflict=function(t){return e.$===d&&(e.$=Rt),t&&e.jQuery===d&&(e.jQuery=Ht),d},t||(e.jQuery=e.$=d),d}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("jquery"),require("popper.js")):"function"==typeof define&&define.amd?define(["exports","jquery","popper.js"],t):t(e.bootstrap={},e.jQuery,e.Popper)}(this,function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}t=t&&t.hasOwnProperty("default")?t.default:t,n=n&&n.hasOwnProperty("default")?n.default:n;var s,a,l,u,c,f,h,d,p,g,m,v,y,_,b,T,E,C,w,x,S,A,D,N,I,k,O,j,L,P,H,R,q,M,W,F,B,U,V,K,$,Q,Y,G,X,z,J,Z,ee,te,ne,ie,re,oe,se,ae,le,ue,ce,fe,he,de,pe,ge,me,ve,ye,_e,be,Te,Ee,Ce,we,xe,Se,Ae,De,Ne,Ie,ke,Oe,je,Le,Pe,He,Re,qe,Me,We,Fe,Be,Ue,Ve,Ke,$e,Qe,Ye,Ge,Xe,ze,Je,Ze,et,tt,nt,it,rt,ot,st,at,lt,ut,ct,ft,ht,dt,pt,gt,mt,vt,yt,_t,bt=(vt=t,yt=!1,_t={TRANSITION_END:"bsTransitionEnd",getUID:function(e){for(;e+=~~(1e6*Math.random()),document.getElementById(e););return e},getSelectorFromElement:function(e){var t,n=e.getAttribute("data-target");n&&"#"!==n||(n=e.getAttribute("href")||""),"#"===n.charAt(0)&&(t=n,n=t="function"==typeof vt.escapeSelector?vt.escapeSelector(t).substr(1):t.replace(/(:|\.|\[|\]|,|=|@)/g,"\\$1"));try{return vt(document).find(n).length>0?n:null}catch(e){return null}},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){vt(e).trigger(yt.end)},supportsTransitionEnd:function(){return Boolean(yt)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var r=n[i],o=t[i],s=o&&_t.isElement(o)?"element":(a=o,{}.toString.call(a).match(/\s([a-zA-Z]+)/)[1].toLowerCase());if(!new RegExp(r).test(s))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+r+'".')}var a}},yt=("undefined"==typeof window||!window.QUnit)&&{end:"transitionend"},vt.fn.emulateTransitionEnd=function(e){var t=this,n=!1;return vt(this).one(_t.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||_t.triggerTransitionEnd(t)},e),this},_t.supportsTransitionEnd()&&(vt.event.special[_t.TRANSITION_END]={bindType:yt.end,delegateType:yt.end,handle:function(e){if(vt(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}),_t),Tt=(a="alert",u="."+(l="bs.alert"),c=(s=t).fn[a],f={CLOSE:"close"+u,CLOSED:"closed"+u,CLICK_DATA_API:"click"+u+".data-api"},"alert","fade","show",h=function(){function e(e){this._element=e}var t=e.prototype;return t.close=function(e){e=e||this._element;var t=this._getRootElement(e);this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},t.dispose=function(){s.removeData(this._element,l),this._element=null},t._getRootElement=function(e){var t=bt.getSelectorFromElement(e),n=!1;return t&&(n=s(t)[0]),n||(n=s(e).closest(".alert")[0]),n},t._triggerCloseEvent=function(e){var t=s.Event(f.CLOSE);return s(e).trigger(t),t},t._removeElement=function(e){var t=this;s(e).removeClass("show"),bt.supportsTransitionEnd()&&s(e).hasClass("fade")?s(e).one(bt.TRANSITION_END,function(n){return t._destroyElement(e,n)}).emulateTransitionEnd(150):this._destroyElement(e)},t._destroyElement=function(e){s(e).detach().trigger(f.CLOSED).remove()},e._jQueryInterface=function(t){return this.each(function(){var n=s(this),i=n.data(l);i||(i=new e(this),n.data(l,i)),"close"===t&&i[t](this)})},e._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},r(e,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),e}(),s(document).on(f.CLICK_DATA_API,'[data-dismiss="alert"]',h._handleDismiss(new h)),s.fn[a]=h._jQueryInterface,s.fn[a].Constructor=h,s.fn[a].noConflict=function(){return s.fn[a]=c,h._jQueryInterface},h),Et=(p="button",m="."+(g="bs.button"),v=".data-api",y=(d=t).fn[p],_="active","btn","focus",b='[data-toggle^="button"]','[data-toggle="buttons"]',"input",".active",".btn",T={CLICK_DATA_API:"click"+m+v,FOCUS_BLUR_DATA_API:"focus"+m+v+" blur"+m+v},E=function(){function e(e){this._element=e}var t=e.prototype;return t.toggle=function(){var e=!0,t=!0,n=d(this._element).closest('[data-toggle="buttons"]')[0];if(n){var i=d(this._element).find("input")[0];if(i){if("radio"===i.type)if(i.checked&&d(this._element).hasClass(_))e=!1;else{var r=d(n).find(".active")[0];r&&d(r).removeClass(_)}if(e){if(i.hasAttribute("disabled")||n.hasAttribute("disabled")||i.classList.contains("disabled")||n.classList.contains("disabled"))return;i.checked=!d(this._element).hasClass(_),d(i).trigger("change")}i.focus(),t=!1}}t&&this._element.setAttribute("aria-pressed",!d(this._element).hasClass(_)),e&&d(this._element).toggleClass(_)},t.dispose=function(){d.removeData(this._element,g),this._element=null},e._jQueryInterface=function(t){return this.each(function(){var n=d(this).data(g);n||(n=new e(this),d(this).data(g,n)),"toggle"===t&&n[t]()})},r(e,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),e}(),d(document).on(T.CLICK_DATA_API,b,function(e){e.preventDefault();var t=e.target;d(t).hasClass("btn")||(t=d(t).closest(".btn")),E._jQueryInterface.call(d(t),"toggle")}).on(T.FOCUS_BLUR_DATA_API,b,function(e){var t=d(e.target).closest(".btn")[0];d(t).toggleClass("focus",/^focus(in)?$/.test(e.type))}),d.fn[p]=E._jQueryInterface,d.fn[p].Constructor=E,d.fn[p].noConflict=function(){return d.fn[p]=y,E._jQueryInterface},E),Ct=(ot="carousel",at="."+(st="bs.carousel"),lt=(rt=t).fn[ot],ut={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},ct={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},ft="next",ht="prev",dt={SLIDE:"slide"+at,SLID:"slid"+at,KEYDOWN:"keydown"+at,MOUSEENTER:"mouseenter"+at,MOUSELEAVE:"mouseleave"+at,TOUCHEND:"touchend"+at,LOAD_DATA_API:"load"+at+".data-api",CLICK_DATA_API:"click"+at+".data-api"},pt="active",gt={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},mt=function(){function e(e,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(t),this._element=rt(e)[0],this._indicatorsElement=rt(this._element).find(gt.INDICATORS)[0],this._addEventListeners()}var t=e.prototype;return t.next=function(){this._isSliding||this._slide(ft)},t.nextWhenVisible=function(){!document.hidden&&rt(this._element).is(":visible")&&"hidden"!==rt(this._element).css("visibility")&&this.next()},t.prev=function(){this._isSliding||this._slide(ht)},t.pause=function(e){e||(this._isPaused=!0),rt(this._element).find(gt.NEXT_PREV)[0]&&bt.supportsTransitionEnd()&&(bt.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(e){var t=this;this._activeElement=rt(this._element).find(gt.ACTIVE_ITEM)[0];var n=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)rt(this._element).one(dt.SLID,function(){return t.to(e)});else{if(n===e)return this.pause(),void this.cycle();var i=e>n?ft:ht;this._slide(i,this._items[e])}},t.dispose=function(){rt(this._element).off(at),rt.removeData(this._element,st),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(e){return e=o({},ut,e),bt.typeCheckConfig(ot,e,ct),e},t._addEventListeners=function(){var e=this;this._config.keyboard&&rt(this._element).on(dt.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(rt(this._element).on(dt.MOUSEENTER,function(t){return e.pause(t)}).on(dt.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&rt(this._element).on(dt.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},t._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},t._getItemIndex=function(e){return this._items=rt.makeArray(rt(e).parent().find(gt.ITEM)),this._items.indexOf(e)},t._getItemByDirection=function(e,t){var n=e===ft,i=e===ht,r=this._getItemIndex(t),o=this._items.length-1;if((i&&0===r||n&&r===o)&&!this._config.wrap)return t;var s=(r+(e===ht?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},t._triggerSlideEvent=function(e,t){var n=this._getItemIndex(e),i=this._getItemIndex(rt(this._element).find(gt.ACTIVE_ITEM)[0]),r=rt.Event(dt.SLIDE,{relatedTarget:e,direction:t,from:i,to:n});return rt(this._element).trigger(r),r},t._setActiveIndicatorElement=function(e){if(this._indicatorsElement){rt(this._indicatorsElement).find(gt.ACTIVE).removeClass(pt);var t=this._indicatorsElement.children[this._getItemIndex(e)];t&&rt(t).addClass(pt)}},t._slide=function(e,t){var n,i,r,o=this,s=rt(this._element).find(gt.ACTIVE_ITEM)[0],a=this._getItemIndex(s),l=t||s&&this._getItemByDirection(e,s),u=this._getItemIndex(l),c=Boolean(this._interval);if(e===ft?(n="carousel-item-left",i="carousel-item-next",r="left"):(n="carousel-item-right",i="carousel-item-prev",r="right"),l&&rt(l).hasClass(pt))this._isSliding=!1;else if(!this._triggerSlideEvent(l,r).isDefaultPrevented()&&s&&l){this._isSliding=!0,c&&this.pause(),this._setActiveIndicatorElement(l);var f=rt.Event(dt.SLID,{relatedTarget:l,direction:r,from:a,to:u});bt.supportsTransitionEnd()&&rt(this._element).hasClass("slide")?(rt(l).addClass(i),bt.reflow(l),rt(s).addClass(n),rt(l).addClass(n),rt(s).one(bt.TRANSITION_END,function(){rt(l).removeClass(n+" "+i).addClass(pt),rt(s).removeClass(pt+" "+i+" "+n),o._isSliding=!1,setTimeout(function(){return rt(o._element).trigger(f)},0)}).emulateTransitionEnd(600)):(rt(s).removeClass(pt),rt(l).addClass(pt),this._isSliding=!1,rt(this._element).trigger(f)),c&&this.cycle()}},e._jQueryInterface=function(t){return this.each(function(){var n=rt(this).data(st),i=o({},ut,rt(this).data());"object"==typeof t&&(i=o({},i,t));var r="string"==typeof t?t:i.slide;if(n||(n=new e(this,i),rt(this).data(st,n)),"number"==typeof t)n.to(t);else if("string"==typeof r){if(void 0===n[r])throw new TypeError('No method named "'+r+'"');n[r]()}else i.interval&&(n.pause(),n.cycle())})},e._dataApiClickHandler=function(t){var n=bt.getSelectorFromElement(this);if(n){var i=rt(n)[0];if(i&&rt(i).hasClass("carousel")){var r=o({},rt(i).data(),rt(this).data()),s=this.getAttribute("data-slide-to");s&&(r.interval=!1),e._jQueryInterface.call(rt(i),r),s&&rt(i).data(st).to(s),t.preventDefault()}}},r(e,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return ut}}]),e}(),rt(document).on(dt.CLICK_DATA_API,gt.DATA_SLIDE,mt._dataApiClickHandler),rt(window).on(dt.LOAD_DATA_API,function(){rt(gt.DATA_RIDE).each(function(){var e=rt(this);mt._jQueryInterface.call(e,e.data())})}),rt.fn[ot]=mt._jQueryInterface,rt.fn[ot].Constructor=mt,rt.fn[ot].noConflict=function(){return rt.fn[ot]=lt,mt._jQueryInterface},mt),wt=(Ke="collapse",Qe="."+($e="bs.collapse"),Ye=(Ve=t).fn[Ke],Ge={toggle:!0,parent:""},Xe={toggle:"boolean",parent:"(string|element)"},ze={SHOW:"show"+Qe,SHOWN:"shown"+Qe,HIDE:"hide"+Qe,HIDDEN:"hidden"+Qe,CLICK_DATA_API:"click"+Qe+".data-api"},Je="show",Ze="collapse",et="collapsing",tt="collapsed",nt={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},it=function(){function e(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=Ve.makeArray(Ve('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=Ve(nt.DATA_TOGGLE),i=0;i<n.length;i++){var r=n[i],o=bt.getSelectorFromElement(r);null!==o&&Ve(o).filter(e).length>0&&(this._selector=o,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t=e.prototype;return t.toggle=function(){Ve(this._element).hasClass(Je)?this.hide():this.show()},t.show=function(){var t,n,i=this;if(!(this._isTransitioning||Ve(this._element).hasClass(Je)||(this._parent&&0===(t=Ve.makeArray(Ve(this._parent).find(nt.ACTIVES).filter('[data-parent="'+this._config.parent+'"]'))).length&&(t=null),t&&(n=Ve(t).not(this._selector).data($e))&&n._isTransitioning))){var r=Ve.Event(ze.SHOW);if(Ve(this._element).trigger(r),!r.isDefaultPrevented()){t&&(e._jQueryInterface.call(Ve(t).not(this._selector),"hide"),n||Ve(t).data($e,null));var o=this._getDimension();Ve(this._element).removeClass(Ze).addClass(et),this._element.style[o]=0,this._triggerArray.length>0&&Ve(this._triggerArray).removeClass(tt).attr("aria-expanded",!0),this.setTransitioning(!0);var s=function(){Ve(i._element).removeClass(et).addClass(Ze).addClass(Je),i._element.style[o]="",i.setTransitioning(!1),Ve(i._element).trigger(ze.SHOWN)};if(bt.supportsTransitionEnd()){var a="scroll"+(o[0].toUpperCase()+o.slice(1));Ve(this._element).one(bt.TRANSITION_END,s).emulateTransitionEnd(600),this._element.style[o]=this._element[a]+"px"}else s()}}},t.hide=function(){var e=this;if(!this._isTransitioning&&Ve(this._element).hasClass(Je)){var t=Ve.Event(ze.HIDE);if(Ve(this._element).trigger(t),!t.isDefaultPrevented()){var n=this._getDimension();if(this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",bt.reflow(this._element),Ve(this._element).addClass(et).removeClass(Ze).removeClass(Je),this._triggerArray.length>0)for(var i=0;i<this._triggerArray.length;i++){var r=this._triggerArray[i],o=bt.getSelectorFromElement(r);null!==o&&(Ve(o).hasClass(Je)||Ve(r).addClass(tt).attr("aria-expanded",!1))}this.setTransitioning(!0);var s=function(){e.setTransitioning(!1),Ve(e._element).removeClass(et).addClass(Ze).trigger(ze.HIDDEN)};this._element.style[n]="",bt.supportsTransitionEnd()?Ve(this._element).one(bt.TRANSITION_END,s).emulateTransitionEnd(600):s()}}},t.setTransitioning=function(e){this._isTransitioning=e},t.dispose=function(){Ve.removeData(this._element,$e),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(e){return(e=o({},Ge,e)).toggle=Boolean(e.toggle),bt.typeCheckConfig(Ke,e,Xe),e},t._getDimension=function(){return Ve(this._element).hasClass("width")?"width":"height"},t._getParent=function(){var t=this,n=null;bt.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=Ve(this._config.parent)[0];var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return Ve(n).find(i).each(function(n,i){t._addAriaAndCollapsedClass(e._getTargetFromElement(i),[i])}),n},t._addAriaAndCollapsedClass=function(e,t){if(e){var n=Ve(e).hasClass(Je);t.length>0&&Ve(t).toggleClass(tt,!n).attr("aria-expanded",n)}},e._getTargetFromElement=function(e){var t=bt.getSelectorFromElement(e);return t?Ve(t)[0]:null},e._jQueryInterface=function(t){return this.each(function(){var n=Ve(this),i=n.data($e),r=o({},Ge,n.data(),"object"==typeof t&&t);if(!i&&r.toggle&&/show|hide/.test(t)&&(r.toggle=!1),i||(i=new e(this,r),n.data($e,i)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t]()}})},r(e,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return Ge}}]),e}(),Ve(document).on(ze.CLICK_DATA_API,nt.DATA_TOGGLE,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var t=Ve(this),n=bt.getSelectorFromElement(this);Ve(n).each(function(){var e=Ve(this),n=e.data($e)?"toggle":t.data();it._jQueryInterface.call(e,n)})}),Ve.fn[Ke]=it._jQueryInterface,Ve.fn[Ke].Constructor=it,Ve.fn[Ke].noConflict=function(){return Ve.fn[Ke]=Ye,it._jQueryInterface},it),xt=(Ne="dropdown",ke="."+(Ie="bs.dropdown"),Oe=".data-api",je=(De=t).fn[Ne],Le=new RegExp("38|40|27"),Pe={HIDE:"hide"+ke,HIDDEN:"hidden"+ke,SHOW:"show"+ke,SHOWN:"shown"+ke,CLICK:"click"+ke,CLICK_DATA_API:"click"+ke+Oe,KEYDOWN_DATA_API:"keydown"+ke+Oe,KEYUP_DATA_API:"keyup"+ke+Oe},He="disabled",Re="show",qe="dropdown-menu-right",Me='[data-toggle="dropdown"]',We=".dropdown-menu",Fe={offset:0,flip:!0,boundary:"scrollParent"},Be={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)"},Ue=function(){function e(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t=e.prototype;return t.toggle=function(){if(!this._element.disabled&&!De(this._element).hasClass(He)){var t=e._getParentFromElement(this._element),i=De(this._menu).hasClass(Re);if(e._clearMenus(),!i){var r={relatedTarget:this._element},o=De.Event(Pe.SHOW,r);if(De(t).trigger(o),!o.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var s=this._element;De(t).hasClass("dropup")&&(De(this._menu).hasClass("dropdown-menu-left")||De(this._menu).hasClass(qe))&&(s=t),"scrollParent"!==this._config.boundary&&De(t).addClass("position-static"),this._popper=new n(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===De(t).closest(".navbar-nav").length&&De("body").children().on("mouseover",null,De.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),De(this._menu).toggleClass(Re),De(t).toggleClass(Re).trigger(De.Event(Pe.SHOWN,r))}}}},t.dispose=function(){De.removeData(this._element,Ie),De(this._element).off(ke),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},t._addEventListeners=function(){var e=this;De(this._element).on(Pe.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},t._getConfig=function(e){return e=o({},this.constructor.Default,De(this._element).data(),e),bt.typeCheckConfig(Ne,e,this.constructor.DefaultType),e},t._getMenuElement=function(){if(!this._menu){var t=e._getParentFromElement(this._element);this._menu=De(t).find(We)[0]}return this._menu},t._getPlacement=function(){var e=De(this._element).parent(),t="bottom-start";return e.hasClass("dropup")?(t="top-start",De(this._menu).hasClass(qe)&&(t="top-end")):e.hasClass("dropright")?t="right-start":e.hasClass("dropleft")?t="left-start":De(this._menu).hasClass(qe)&&(t="bottom-end"),t},t._detectNavbar=function(){return De(this._element).closest(".navbar").length>0},t._getPopperConfig=function(){var e=this,t={};return"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=o({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset,{placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}}},e._jQueryInterface=function(t){return this.each(function(){var n=De(this).data(Ie);if(n||(n=new e(this,"object"==typeof t?t:null),De(this).data(Ie,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},e._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var n=De.makeArray(De(Me)),i=0;i<n.length;i++){var r=e._getParentFromElement(n[i]),o=De(n[i]).data(Ie),s={relatedTarget:n[i]};if(o){var a=o._menu;if(De(r).hasClass(Re)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&De.contains(r,t.target))){var l=De.Event(Pe.HIDE,s);De(r).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&De("body").children().off("mouseover",null,De.noop),n[i].setAttribute("aria-expanded","false"),De(a).removeClass(Re),De(r).removeClass(Re).trigger(De.Event(Pe.HIDDEN,s)))}}}},e._getParentFromElement=function(e){var t,n=bt.getSelectorFromElement(e);return n&&(t=De(n)[0]),t||e.parentNode},e._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||De(t.target).closest(We).length)):Le.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!De(this).hasClass(He))){var n=e._getParentFromElement(this),i=De(n).hasClass(Re);if((i||27===t.which&&32===t.which)&&(!i||27!==t.which&&32!==t.which)){var r=De(n).find(".dropdown-menu .dropdown-item:not(.disabled)").get();if(0!==r.length){var o=r.indexOf(t.target);38===t.which&&o>0&&o--,40===t.which&&o<r.length-1&&o++,o<0&&(o=0),r[o].focus()}}else{if(27===t.which){var s=De(n).find(Me)[0];De(s).trigger("focus")}De(this).trigger("click")}}},r(e,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return Fe}},{key:"DefaultType",get:function(){return Be}}]),e}(),De(document).on(Pe.KEYDOWN_DATA_API,Me,Ue._dataApiKeydownHandler).on(Pe.KEYDOWN_DATA_API,We,Ue._dataApiKeydownHandler).on(Pe.CLICK_DATA_API+" "+Pe.KEYUP_DATA_API,Ue._clearMenus).on(Pe.CLICK_DATA_API,Me,function(e){e.preventDefault(),e.stopPropagation(),Ue._jQueryInterface.call(De(this),"toggle")}).on(Pe.CLICK_DATA_API,".dropdown form",function(e){e.stopPropagation()}),De.fn[Ne]=Ue._jQueryInterface,De.fn[Ne].Constructor=Ue,De.fn[Ne].noConflict=function(){return De.fn[Ne]=je,Ue._jQueryInterface},Ue),St=(ye="."+(ve="bs.modal"),_e=(me=t).fn.modal,be={backdrop:!0,keyboard:!0,focus:!0,show:!0},Te={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Ee={HIDE:"hide"+ye,HIDDEN:"hidden"+ye,SHOW:"show"+ye,SHOWN:"shown"+ye,FOCUSIN:"focusin"+ye,RESIZE:"resize"+ye,CLICK_DISMISS:"click.dismiss"+ye,KEYDOWN_DISMISS:"keydown.dismiss"+ye,MOUSEUP_DISMISS:"mouseup.dismiss"+ye,MOUSEDOWN_DISMISS:"mousedown.dismiss"+ye,CLICK_DATA_API:"click"+ye+".data-api"},Ce="modal-open",we="fade",xe="show",Se={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},Ae=function(){function e(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=me(e).find(Se.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}var t=e.prototype;return t.toggle=function(e){return this._isShown?this.hide():this.show(e)},t.show=function(e){var t=this;if(!this._isTransitioning&&!this._isShown){bt.supportsTransitionEnd()&&me(this._element).hasClass(we)&&(this._isTransitioning=!0);var n=me.Event(Ee.SHOW,{relatedTarget:e});me(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),me(document.body).addClass(Ce),this._setEscapeEvent(),this._setResizeEvent(),me(this._element).on(Ee.CLICK_DISMISS,Se.DATA_DISMISS,function(e){return t.hide(e)}),me(this._dialog).on(Ee.MOUSEDOWN_DISMISS,function(){me(t._element).one(Ee.MOUSEUP_DISMISS,function(e){me(e.target).is(t._element)&&(t._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return t._showElement(e)}))}},t.hide=function(e){var t=this;if(e&&e.preventDefault(),!this._isTransitioning&&this._isShown){var n=me.Event(Ee.HIDE);if(me(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=bt.supportsTransitionEnd()&&me(this._element).hasClass(we);i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),me(document).off(Ee.FOCUSIN),me(this._element).removeClass(xe),me(this._element).off(Ee.CLICK_DISMISS),me(this._dialog).off(Ee.MOUSEDOWN_DISMISS),i?me(this._element).one(bt.TRANSITION_END,function(e){return t._hideModal(e)}).emulateTransitionEnd(300):this._hideModal()}}},t.dispose=function(){me.removeData(this._element,ve),me(window,document,this._element,this._backdrop).off(ye),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(e){return e=o({},be,e),bt.typeCheckConfig("modal",e,Te),e},t._showElement=function(e){var t=this,n=bt.supportsTransitionEnd()&&me(this._element).hasClass(we);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&bt.reflow(this._element),me(this._element).addClass(xe),this._config.focus&&this._enforceFocus();var i=me.Event(Ee.SHOWN,{relatedTarget:e}),r=function(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,me(t._element).trigger(i)};n?me(this._dialog).one(bt.TRANSITION_END,r).emulateTransitionEnd(300):r()},t._enforceFocus=function(){var e=this;me(document).off(Ee.FOCUSIN).on(Ee.FOCUSIN,function(t){document!==t.target&&e._element!==t.target&&0===me(e._element).has(t.target).length&&e._element.focus()})},t._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?me(this._element).on(Ee.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||me(this._element).off(Ee.KEYDOWN_DISMISS)},t._setResizeEvent=function(){var e=this;this._isShown?me(window).on(Ee.RESIZE,function(t){return e.handleUpdate(t)}):me(window).off(Ee.RESIZE)},t._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){me(document.body).removeClass(Ce),e._resetAdjustments(),e._resetScrollbar(),me(e._element).trigger(Ee.HIDDEN)})},t._removeBackdrop=function(){this._backdrop&&(me(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(e){var t=this,n=me(this._element).hasClass(we)?we:"";if(this._isShown&&this._config.backdrop){var i=bt.supportsTransitionEnd()&&n;if(this._backdrop=document.createElement("div"),this._backdrop.className="modal-backdrop",n&&me(this._backdrop).addClass(n),me(this._backdrop).appendTo(document.body),me(this._element).on(Ee.CLICK_DISMISS,function(e){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===t._config.backdrop?t._element.focus():t.hide())}),i&&bt.reflow(this._backdrop),me(this._backdrop).addClass(xe),!e)return;if(!i)return void e();me(this._backdrop).one(bt.TRANSITION_END,e).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){me(this._backdrop).removeClass(xe);var r=function(){t._removeBackdrop(),e&&e()};bt.supportsTransitionEnd()&&me(this._element).hasClass(we)?me(this._backdrop).one(bt.TRANSITION_END,r).emulateTransitionEnd(150):r()}else e&&e()},t._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},t._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){me(Se.FIXED_CONTENT).each(function(t,n){var i=me(n)[0].style.paddingRight,r=me(n).css("padding-right");me(n).data("padding-right",i).css("padding-right",parseFloat(r)+e._scrollbarWidth+"px")}),me(Se.STICKY_CONTENT).each(function(t,n){var i=me(n)[0].style.marginRight,r=me(n).css("margin-right");me(n).data("margin-right",i).css("margin-right",parseFloat(r)-e._scrollbarWidth+"px")}),me(Se.NAVBAR_TOGGLER).each(function(t,n){var i=me(n)[0].style.marginRight,r=me(n).css("margin-right");me(n).data("margin-right",i).css("margin-right",parseFloat(r)+e._scrollbarWidth+"px")});var t=document.body.style.paddingRight,n=me("body").css("padding-right");me("body").data("padding-right",t).css("padding-right",parseFloat(n)+this._scrollbarWidth+"px")}},t._resetScrollbar=function(){me(Se.FIXED_CONTENT).each(function(e,t){var n=me(t).data("padding-right");void 0!==n&&me(t).css("padding-right",n).removeData("padding-right")}),me(Se.STICKY_CONTENT+", "+Se.NAVBAR_TOGGLER).each(function(e,t){var n=me(t).data("margin-right");void 0!==n&&me(t).css("margin-right",n).removeData("margin-right")});var e=me("body").data("padding-right");void 0!==e&&me("body").css("padding-right",e).removeData("padding-right")},t._getScrollbarWidth=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure",document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},e._jQueryInterface=function(t,n){return this.each(function(){var i=me(this).data(ve),r=o({},e.Default,me(this).data(),"object"==typeof t&&t);if(i||(i=new e(this,r),me(this).data(ve,i)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t](n)}else r.show&&i.show(n)})},r(e,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return be}}]),e}(),me(document).on(Ee.CLICK_DATA_API,Se.DATA_TOGGLE,function(e){var t,n=this,i=bt.getSelectorFromElement(this);i&&(t=me(i)[0]);var r=me(t).data(ve)?"toggle":o({},me(t).data(),me(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var s=me(t).one(Ee.SHOW,function(e){e.isDefaultPrevented()||s.one(Ee.HIDDEN,function(){me(n).is(":visible")&&n.focus()})});Ae._jQueryInterface.call(me(t),r,this)}),me.fn.modal=Ae._jQueryInterface,me.fn.modal.Constructor=Ae,me.fn.modal.noConflict=function(){return me.fn.modal=_e,Ae._jQueryInterface},Ae),At=(te="tooltip",ie="."+(ne="bs.tooltip"),re=(ee=t).fn[te],oe=new RegExp("(^|\\s)bs-tooltip\\S+","g"),se={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},ae={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},le={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},ue="show",ce={HIDE:"hide"+ie,HIDDEN:"hidden"+ie,SHOW:"show"+ie,SHOWN:"shown"+ie,INSERTED:"inserted"+ie,CLICK:"click"+ie,FOCUSIN:"focusin"+ie,FOCUSOUT:"focusout"+ie,MOUSEENTER:"mouseenter"+ie,MOUSELEAVE:"mouseleave"+ie},fe="fade",he="show",de="hover",pe="focus",ge=function(){function e(e,t){if(void 0===n)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var t=e.prototype;return t.enable=function(){this._isEnabled=!0},t.disable=function(){this._isEnabled=!1},t.toggleEnabled=function(){this._isEnabled=!this._isEnabled},t.toggle=function(e){if(this._isEnabled)if(e){var t=this.constructor.DATA_KEY,n=ee(e.currentTarget).data(t);n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),ee(e.currentTarget).data(t,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(ee(this.getTipElement()).hasClass(he))return void this._leave(null,this);this._enter(null,this)}},t.dispose=function(){clearTimeout(this._timeout),ee.removeData(this.element,this.constructor.DATA_KEY),ee(this.element).off(this.constructor.EVENT_KEY),ee(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&ee(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},t.show=function(){var t=this;if("none"===ee(this.element).css("display"))throw new Error("Please use show on visible elements");var i=ee.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){ee(this.element).trigger(i);var r=ee.contains(this.element.ownerDocument.documentElement,this.element);if(i.isDefaultPrevented()||!r)return;var o=this.getTipElement(),s=bt.getUID(this.constructor.NAME);o.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&ee(o).addClass(fe);var a="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,l=this._getAttachment(a);this.addAttachmentClass(l);var u=!1===this.config.container?document.body:ee(this.config.container);ee(o).data(this.constructor.DATA_KEY,this),ee.contains(this.element.ownerDocument.documentElement,this.tip)||ee(o).appendTo(u),ee(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,o,{placement:l,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){t._handlePopperPlacementChange(e)}}),ee(o).addClass(he),"ontouchstart"in document.documentElement&&ee("body").children().on("mouseover",null,ee.noop);var c=function(){t.config.animation&&t._fixTransition();var e=t._hoverState;t._hoverState=null,ee(t.element).trigger(t.constructor.Event.SHOWN),"out"===e&&t._leave(null,t)};bt.supportsTransitionEnd()&&ee(this.tip).hasClass(fe)?ee(this.tip).one(bt.TRANSITION_END,c).emulateTransitionEnd(e._TRANSITION_DURATION):c()}},t.hide=function(e){var t=this,n=this.getTipElement(),i=ee.Event(this.constructor.Event.HIDE),r=function(){t._hoverState!==ue&&n.parentNode&&n.parentNode.removeChild(n),t._cleanTipClass(),t.element.removeAttribute("aria-describedby"),ee(t.element).trigger(t.constructor.Event.HIDDEN),null!==t._popper&&t._popper.destroy(),e&&e()};ee(this.element).trigger(i),i.isDefaultPrevented()||(ee(n).removeClass(he),"ontouchstart"in document.documentElement&&ee("body").children().off("mouseover",null,ee.noop),this._activeTrigger.click=!1,this._activeTrigger[pe]=!1,this._activeTrigger[de]=!1,bt.supportsTransitionEnd()&&ee(this.tip).hasClass(fe)?ee(n).one(bt.TRANSITION_END,r).emulateTransitionEnd(150):r(),this._hoverState="")},t.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},t.isWithContent=function(){return Boolean(this.getTitle())},t.addAttachmentClass=function(e){ee(this.getTipElement()).addClass("bs-tooltip-"+e)},t.getTipElement=function(){return this.tip=this.tip||ee(this.config.template)[0],this.tip},t.setContent=function(){var e=ee(this.getTipElement());this.setElementContent(e.find(".tooltip-inner"),this.getTitle()),e.removeClass(fe+" "+he)},t.setElementContent=function(e,t){var n=this.config.html;"object"==typeof t&&(t.nodeType||t.jquery)?n?ee(t).parent().is(e)||e.empty().append(t):e.text(ee(t).text()):e[n?"html":"text"](t)},t.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},t._getAttachment=function(e){return ae[e.toUpperCase()]},t._setListeners=function(){var e=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)ee(e.element).on(e.constructor.Event.CLICK,e.config.selector,function(t){return e.toggle(t)});else if("manual"!==t){var n=t===de?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,i=t===de?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;ee(e.element).on(n,e.config.selector,function(t){return e._enter(t)}).on(i,e.config.selector,function(t){return e._leave(t)})}ee(e.element).closest(".modal").on("hide.bs.modal",function(){return e.hide()})}),this.config.selector?this.config=o({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},t._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},t._enter=function(e,t){var n=this.constructor.DATA_KEY;(t=t||ee(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),ee(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusin"===e.type?pe:de]=!0),ee(t.getTipElement()).hasClass(he)||t._hoverState===ue?t._hoverState=ue:(clearTimeout(t._timeout),t._hoverState=ue,t.config.delay&&t.config.delay.show?t._timeout=setTimeout(function(){t._hoverState===ue&&t.show()},t.config.delay.show):t.show())},t._leave=function(e,t){var n=this.constructor.DATA_KEY;(t=t||ee(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),ee(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusout"===e.type?pe:de]=!1),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState="out",t.config.delay&&t.config.delay.hide?t._timeout=setTimeout(function(){"out"===t._hoverState&&t.hide()},t.config.delay.hide):t.hide())},t._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},t._getConfig=function(e){return"number"==typeof(e=o({},this.constructor.Default,ee(this.element).data(),e)).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),bt.typeCheckConfig(te,e,this.constructor.DefaultType),e},t._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},t._cleanTipClass=function(){var e=ee(this.getTipElement()),t=e.attr("class").match(oe);null!==t&&t.length>0&&e.removeClass(t.join(""))},t._handlePopperPlacementChange=function(e){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},t._fixTransition=function(){var e=this.getTipElement(),t=this.config.animation;null===e.getAttribute("x-placement")&&(ee(e).removeClass(fe),this.config.animation=!1,this.hide(),this.show(),this.config.animation=t)},e._jQueryInterface=function(t){return this.each(function(){var n=ee(this).data(ne),i="object"==typeof t&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new e(this,i),ee(this).data(ne,n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},r(e,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return le}},{key:"NAME",get:function(){return te}},{key:"DATA_KEY",get:function(){return ne}},{key:"Event",get:function(){return ce}},{key:"EVENT_KEY",get:function(){return ie}},{key:"DefaultType",get:function(){return se}}]),e}(),ee.fn[te]=ge._jQueryInterface,ee.fn[te].Constructor=ge,ee.fn[te].noConflict=function(){return ee.fn[te]=re,ge._jQueryInterface},ge),Dt=(K="popover",Q="."+($="bs.popover"),Y=(V=t).fn[K],G=new RegExp("(^|\\s)bs-popover\\S+","g"),X=o({},At.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),z=o({},At.DefaultType,{content:"(string|element|function)"}),J={HIDE:"hide"+Q,HIDDEN:"hidden"+Q,SHOW:"show"+Q,SHOWN:"shown"+Q,INSERTED:"inserted"+Q,CLICK:"click"+Q,FOCUSIN:"focusin"+Q,FOCUSOUT:"focusout"+Q,MOUSEENTER:"mouseenter"+Q,MOUSELEAVE:"mouseleave"+Q},Z=function(e){var t,n;function i(){return e.apply(this,arguments)||this}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=i.prototype;return o.isWithContent=function(){return this.getTitle()||this._getContent()},o.addAttachmentClass=function(e){V(this.getTipElement()).addClass("bs-popover-"+e)},o.getTipElement=function(){return this.tip=this.tip||V(this.config.template)[0],this.tip},o.setContent=function(){var e=V(this.getTipElement());this.setElementContent(e.find(".popover-header"),this.getTitle());var t=this._getContent();"function"==typeof t&&(t=t.call(this.element)),this.setElementContent(e.find(".popover-body"),t),e.removeClass("fade show")},o._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},o._cleanTipClass=function(){var e=V(this.getTipElement()),t=e.attr("class").match(G);null!==t&&t.length>0&&e.removeClass(t.join(""))},i._jQueryInterface=function(e){return this.each(function(){var t=V(this).data($),n="object"==typeof e?e:null;if((t||!/destroy|hide/.test(e))&&(t||(t=new i(this,n),V(this).data($,t)),"string"==typeof e)){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},r(i,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return X}},{key:"NAME",get:function(){return K}},{key:"DATA_KEY",get:function(){return $}},{key:"Event",get:function(){return J}},{key:"EVENT_KEY",get:function(){return Q}},{key:"DefaultType",get:function(){return z}}]),i}(At),V.fn[K]=Z._jQueryInterface,V.fn[K].Constructor=Z,V.fn[K].noConflict=function(){return V.fn[K]=Y,Z._jQueryInterface},Z),Nt=(j="scrollspy",P="."+(L="bs.scrollspy"),H=(O=t).fn[j],R={offset:10,method:"auto",target:""},q={offset:"number",method:"string",target:"(string|element)"},M={ACTIVATE:"activate"+P,SCROLL:"scroll"+P,LOAD_DATA_API:"load"+P+".data-api"},W="active",F={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},B="position",U=function(){function e(e,t){var n=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(t),this._selector=this._config.target+" "+F.NAV_LINKS+","+this._config.target+" "+F.LIST_ITEMS+","+this._config.target+" "+F.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,O(this._scrollElement).on(M.SCROLL,function(e){return n._process(e)}),this.refresh(),this._process()}var t=e.prototype;return t.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?"offset":B,n="auto"===this._config.method?t:this._config.method,i=n===B?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),O.makeArray(O(this._selector)).map(function(e){var t,r=bt.getSelectorFromElement(e);if(r&&(t=O(r)[0]),t){var o=t.getBoundingClientRect();if(o.width||o.height)return[O(t)[n]().top+i,r]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},t.dispose=function(){O.removeData(this._element,L),O(this._scrollElement).off(P),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(e){if("string"!=typeof(e=o({},R,e)).target){var t=O(e.target).attr("id");t||(t=bt.getUID(j),O(e.target).attr("id",t)),e.target="#"+t}return bt.typeCheckConfig(j,e,q),e},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;)this._activeTarget!==this._targets[r]&&e>=this._offsets[r]&&(void 0===this._offsets[r+1]||e<this._offsets[r+1])&&this._activate(this._targets[r])}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",");t=t.map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'});var n=O(t.join(","));n.hasClass("dropdown-item")?(n.closest(F.DROPDOWN).find(F.DROPDOWN_TOGGLE).addClass(W),n.addClass(W)):(n.addClass(W),n.parents(F.NAV_LIST_GROUP).prev(F.NAV_LINKS+", "+F.LIST_ITEMS).addClass(W),n.parents(F.NAV_LIST_GROUP).prev(F.NAV_ITEMS).children(F.NAV_LINKS).addClass(W)),O(this._scrollElement).trigger(M.ACTIVATE,{relatedTarget:e})},t._clear=function(){O(this._selector).filter(F.ACTIVE).removeClass(W)},e._jQueryInterface=function(t){return this.each(function(){var n=O(this).data(L);if(n||(n=new e(this,"object"==typeof t&&t),O(this).data(L,n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},r(e,null,[{key:"VERSION",get:function(){return"4.0.0"}},{key:"Default",get:function(){return R}}]),e}(),O(window).on(M.LOAD_DATA_API,function(){for(var e=O.makeArray(O(F.DATA_SPY)),t=e.length;t--;){var n=O(e[t]);U._jQueryInterface.call(n,n.data())}}),O.fn[j]=U._jQueryInterface,O.fn[j].Constructor=U,O.fn[j].noConflict=function(){return O.fn[j]=H,U._jQueryInterface},U),It=(x="."+(w="bs.tab"),S=(C=t).fn.tab,A={HIDE:"hide"+x,HIDDEN:"hidden"+x,SHOW:"show"+x,SHOWN:"shown"+x,CLICK_DATA_API:"click.bs.tab.data-api"},D="active",N=".active",I="> li > .active",k=function(){function e(e){this._element=e}var t=e.prototype;return t.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&C(this._element).hasClass(D)||C(this._element).hasClass("disabled"))){var t,n,i=C(this._element).closest(".nav, .list-group")[0],r=bt.getSelectorFromElement(this._element);if(i){var o="UL"===i.nodeName?I:N;n=(n=C.makeArray(C(i).find(o)))[n.length-1]}var s=C.Event(A.HIDE,{relatedTarget:this._element}),a=C.Event(A.SHOW,{relatedTarget:n});if(n&&C(n).trigger(s),C(this._element).trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){r&&(t=C(r)[0]),this._activate(this._element,i);var l=function(){var t=C.Event(A.HIDDEN,{relatedTarget:e._element}),i=C.Event(A.SHOWN,{relatedTarget:n});C(n).trigger(t),C(e._element).trigger(i)};t?this._activate(t,t.parentNode,l):l()}}},t.dispose=function(){C.removeData(this._element,w),this._element=null},t._activate=function(e,t,n){var i=this,r=("UL"===t.nodeName?C(t).find(I):C(t).children(N))[0],o=n&&bt.supportsTransitionEnd()&&r&&C(r).hasClass("fade"),s=function(){return i._transitionComplete(e,r,n)};r&&o?C(r).one(bt.TRANSITION_END,s).emulateTransitionEnd(150):s()},t._transitionComplete=function(e,t,n){if(t){C(t).removeClass("show "+D);var i=C(t.parentNode).find("> .dropdown-menu .active")[0];i&&C(i).removeClass(D),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}if(C(e).addClass(D),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),bt.reflow(e),C(e).addClass("show"),e.parentNode&&C(e.parentNode).hasClass("dropdown-menu")){var r=C(e).closest(".dropdown")[0];r&&C(r).find(".dropdown-toggle").addClass(D),e.setAttribute("aria-expanded",!0)}n&&n()},e._jQueryInterface=function(t){return this.each(function(){var n=C(this),i=n.data(w);if(i||(i=new e(this),n.data(w,i)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t]()}})},r(e,null,[{key:"VERSION",get:function(){return"4.0.0"}}]),e}(),C(document).on(A.CLICK_DATA_API,'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',function(e){e.preventDefault(),k._jQueryInterface.call(C(this),"show")}),C.fn.tab=k._jQueryInterface,C.fn.tab.Constructor=k,C.fn.tab.noConflict=function(){return C.fn.tab=S,k._jQueryInterface},k);!function(e){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(t),e.Util=bt,e.Alert=Tt,e.Button=Et,e.Carousel=Ct,e.Collapse=wt,e.Dropdown=xt,e.Modal=St,e.Popover=Dt,e.Scrollspy=Nt,e.Tab=It,e.Tooltip=At,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;base64,
